{
  "url": "https://reflex.dev/docs/events/background-events/\n",
  "sections": [
    "<h1 class=\"rt-Heading rt-r-size-6 font-x-large lg:font-xx-large scroll-m-[5rem] mt-4\" id=\"background-tasks\">Background Tasks</h1><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">A background task is a special type of <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">EventHandler</code> that may run\nconcurrently with other <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">EventHandler</code> functions. This enables long-running\ntasks to execute without blocking UI interactivity.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">A background task is defined by decorating an async <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">State</code> method with\n<code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">@rx.event(background=True)</code>.</p><div class=\"css-116ytrl\" data-orientation=\"vertical\" data-variant=\"classic\"><div class=\"AccordionItem css-18dvnhc\" data-orientation=\"vertical\" data-state=\"closed\">",
    "<h3 class=\"AccordionHeader css-k008qs\" data-orientation=\"vertical\" data-state=\"closed\"><button aria-controls=\"radix-:Rd2mkml6:\" aria-expanded=\"false\" class=\"AccordionTrigger css-1i28d60\" data-orientation=\"vertical\" data-radix-collection-item=\"\" data-state=\"closed\" id=\"radix-:R52mkml6:\" type=\"button\"><div class=\"rt-Flex rt-r-fd-row rt-r-ai-start rt-r-gap-2 rx-Stack css-bkjhwu\"><div class=\"rt-Box css-18lx3gk\"><svg class=\"lucide lucide-triangle-alert css-1yx2zam\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m21.73 18-8-14a2 2 0 0 0-3.48 0l-8 14A2 2 0 0 0 4 21h16a2 2 0 0 0 1.73-3\"></path><path d=\"M12 9v4\"></path><path d=\"M12 17h.01\"></path></svg></div><div class=\"css-1tb50ij\"><p class=\"rt-Text css-56tzch\"><code class=\"rt-reset rt-Code rt-variant-soft\" data-accent-color=\"\">@rx.event(background=True)</code> used to be called <code class=\"rt-reset rt-Code rt-variant-soft\" data-accent-color=\"\">@rx.background</code>.</p></div><div class=\"rt-Flex css-17xejub\"></div><svg class=\"lucide lucide-chevron-down AccordionChevron css-18lx3gk\" fill=\"none\" height=\"24\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m6 9 6 6 6-6\"></path></svg></div></button></h3><div aria-labelledby=\"radix-:R52mkml6:\" class=\"AccordionContent css-14qn398\" data-orientation=\"vertical\" data-state=\"closed\" hidden=\"\" id=\"radix-:Rd2mkml6:\" role=\"region\" style=\"--radix-accordion-content-height: var(--radix-collapsible-content-height); --radix-accordion-content-width: var(--radix-collapsible-content-width);\"></div></div></div><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Whenever a background task needs to interact with the state, <strong>it must enter an\n<code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">async with self</code> context block</strong> which refreshes the state and takes an\nexclusive lock to prevent other tasks or event handlers from modifying it\nconcurrently. Because other <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">EventHandler</code> functions may modify state while the\ntask is running, <strong>outside of the context block, Vars accessed by the background\ntask may be <em>stale</em></strong>. Attempting to modify the state from a background task\noutside of the context block will raise an <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">ImmutableStateError</code> exception.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">In the following example, the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">my_task</code> event handler is decorated with\n<code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">@rx.event(background=True)</code> and increments the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">counter</code> variable every half second, as\nlong as certain conditions are met. While it is running, the UI remains\ninteractive and continues to process events normally.</p><div class=\"rt-Flex rt-r-fd-column rt-r-ai-start rt-r-gap-3 rx-Stack css-tjvfc7\"><div class=\"rt-Flex rt-r-fd-row rt-r-ai-start rt-r-gap-1 rx-Stack css-99pxke\"><div class=\"rt-Box css-1ha2jce\"><svg class=\"lucide lucide-info css-1yx2zam\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><path d=\"M12 16v-4\"></path><path d=\"M12 8h.01\"></path></svg></div><div class=\"css-1w54oj2\"><p class=\"rt-Text css-56tzch\">Background events are similar to simple Task Queues like <a class=\"rt-Text rt-reset rt-Link rt-underline-auto css-1macts\" data-accent-color=\"\" href=\"https://www.fullstackpython.com/celery.html\">Celery</a> allowing asynchronous events.</p></div></div></div><div class=\"rt-Box py-4 gap-4 flex flex-col w-full\" id=\"background_demo\"><div class=\"rt-Box flex flex-col p-6 rounded-xl overflow-x-auto border border-slate-4 bg-slate-2 items-center justify-center w-full\" id=\"background_demo\"><div class=\"rt-Flex rt-r-fd-row rt-r-ai-start rt-r-gap-3 rx-Stack css-zcxndt\">",
    "<h1 class=\"rt-Heading rt-r-size-6 css-134ffhx\">0<!-- --> /</h1><div class=\"rt-TextFieldRoot rt-r-size-2 rt-variant-surface css-b6m44o\"><input class=\"rt-reset rt-TextFieldInput\" spellcheck=\"false\" type=\"text\" value=\"10\"/></div><button class=\"rt-reset rt-BaseButton rt-r-size-2 rt-variant-solid rt-Button\" data-accent-color=\"\">Start</button><button class=\"rt-reset rt-BaseButton rt-r-size-2 rt-variant-solid rt-Button\" data-accent-color=\"\">Reset</button></div></div><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> asyncio</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> reflex </span><span style=\"color:#C678DD\">as</span><span style=\"color:#ABB2BF\"> rx</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> MyTaskState</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">State</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    counter: </span><span style=\"color:#56B6C2\">int</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#D19A66\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    max_counter: </span><span style=\"color:#56B6C2\">int</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#D19A66\"> 10</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    running: </span><span style=\"color:#56B6C2\">bool</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#D19A66\"> False</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    _n_tasks: </span><span style=\"color:#56B6C2\">int</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#D19A66\"> 0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">    @rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">event</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#61AFEF\"> set_max_counter</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#D19A66;font-style:italic\">value</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">        self</span><span style=\"color:#ABB2BF\">.max_counter </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#56B6C2\"> int</span><span style=\"color:#ABB2BF\">(value)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">    @rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">event</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E06C75;font-style:italic\">background</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#D19A66\">True</span><span style=\"color:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    async</span><span style=\"color:#C678DD\"> def</span><span style=\"color:#61AFEF\"> my_task</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        async</span><span style=\"color:#C678DD\"> with</span><span style=\"color:#E5C07B\"> self</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">            # The latest state values are always available inside the context</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            if</span><span style=\"color:#E5C07B\"> self</span><span style=\"color:#ABB2BF\">._n_tasks </span><span style=\"color:#56B6C2\">&gt;</span><span style=\"color:#D19A66\"> 0</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">                # only allow 1 concurrent task</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">                return</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">            # State mutation is only allowed inside context block</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">            self</span><span style=\"color:#ABB2BF\">._n_tasks </span><span style=\"color:#56B6C2\">+=</span><span style=\"color:#D19A66\"> 1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        while</span><span style=\"color:#D19A66\"> True</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            async</span><span style=\"color:#C678DD\"> with</span><span style=\"color:#E5C07B\"> self</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">                # Check for stopping conditions inside context</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">                if</span><span style=\"color:#E5C07B\"> self</span><span style=\"color:#ABB2BF\">.counter </span><span style=\"color:#56B6C2\">&gt;=</span><span style=\"color:#E5C07B\"> self</span><span style=\"color:#ABB2BF\">.max_counter:</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">                    self</span><span style=\"color:#ABB2BF\">.running </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#D19A66\"> False</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">                if</span><span style=\"color:#C678DD\"> not</span><span style=\"color:#E5C07B\"> self</span><span style=\"color:#ABB2BF\">.running:</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">                    self</span><span style=\"color:#ABB2BF\">._n_tasks </span><span style=\"color:#56B6C2\">-=</span><span style=\"color:#D19A66\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">                    return</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">                self</span><span style=\"color:#ABB2BF\">.counter </span><span style=\"color:#56B6C2\">+=</span><span style=\"color:#D19A66\"> 1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">            # Await long operations outside the context to avoid blocking UI</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            await</span><span style=\"color:#ABB2BF\"> asyncio.</span><span style=\"color:#61AFEF\">sleep</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#D19A66\">0.5</span><span style=\"color:#ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">    @rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">event</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#61AFEF\"> toggle_running</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">        self</span><span style=\"color:#ABB2BF\">.running </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#C678DD\"> not</span><span style=\"color:#E5C07B\"> self</span><span style=\"color:#ABB2BF\">.running</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        if</span><span style=\"color:#E5C07B\"> self</span><span style=\"color:#ABB2BF\">.running:</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            return</span><span style=\"color:#ABB2BF\"> MyTaskState.my_task</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">    @rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">event</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#61AFEF\"> clear_counter</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">        self</span><span style=\"color:#ABB2BF\">.counter </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#D19A66\"> 0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">def</span><span style=\"color:#61AFEF\"> background_task_example</span><span style=\"color:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    return</span><span style=\"color:#ABB2BF\"> rx.</span><span style=\"color:#61AFEF\">hstack</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        rx.</span><span style=\"color:#61AFEF\">heading</span><span style=\"color:#ABB2BF\">(MyTaskState.counter, </span><span style=\"color:#98C379\">\" /\"</span><span style=\"color:#ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        rx.</span><span style=\"color:#61AFEF\">input</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            value</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">MyTaskState.max_counter,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            on_change</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">MyTaskState.set_max_counter,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            width</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\">\"8em\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        rx.</span><span style=\"color:#61AFEF\">button</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            rx.</span><span style=\"color:#61AFEF\">cond</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#56B6C2\">~</span><span style=\"color:#ABB2BF\">MyTaskState.running, </span><span style=\"color:#98C379\">\"Start\"</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#98C379\">\"Stop\"</span><span style=\"color:#ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            on_click</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">MyTaskState.toggle_running,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        rx.</span><span style=\"color:#61AFEF\">button</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">            \"Reset\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            on_click</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">MyTaskState.clear_counter,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    )</span></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></div><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/events/background-events/#terminating-background-tasks-on-page-close-or-navigation\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"terminating-background-tasks-on-page-close-or-navigation\">Terminating Background Tasks on Page Close or Navigation</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Sometimes, background tasks may continue running even after the user navigates away from the page or closes the browser tab. To handle such cases, you can check if the websocket associated with the state is disconnected and terminate the background task when necessary.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">The solution involves checking if the client_token is still valid in the app.event_namespace.token_to_sid mapping. If the session is lost (e.g., the user navigates away or closes the page), the background task will stop.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> asyncio</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> reflex </span><span style=\"color:#C678DD\">as</span><span style=\"color:#ABB2BF\"> rx</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> State</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">State</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">    @rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">event</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E06C75;font-style:italic\">background</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#D19A66\">True</span><span style=\"color:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    async</span><span style=\"color:#C678DD\"> def</span><span style=\"color:#61AFEF\"> loop_function</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        while</span><span style=\"color:#D19A66\"> True</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            if</span><span style=\"color:#ABB2BF\"> (</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">                self</span><span style=\"color:#ABB2BF\">.router.session.client_token</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">                not</span><span style=\"color:#C678DD\"> in</span><span style=\"color:#ABB2BF\"> app.event_namespace.token_to_sid</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            ):</span></span>\n<span class=\"line\"><span style=\"color:#56B6C2\">                print</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">                    \"WebSocket connection closed or user navigated away. Stopping background task.\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">                )</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">                break</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#56B6C2\">            print</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#98C379\">\"Running background task...\"</span><span style=\"color:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            await</span><span style=\"color:#ABB2BF\"> asyncio.</span><span style=\"color:#61AFEF\">sleep</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#D19A66\">2</span><span style=\"color:#ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">@rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">page</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E06C75;font-style:italic\">on_load</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#61AFEF\">State</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">loop_function</span><span style=\"color:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">def</span><span style=\"color:#61AFEF\"> index</span><span style=\"color:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    return</span><span style=\"color:#ABB2BF\"> rx.</span><span style=\"color:#61AFEF\">text</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">        \"Hello, this page will manage background tasks and stop them when the page is closed or navigated away.\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    )</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/events/background-events/#task-lifecycle\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"task-lifecycle\">Task Lifecycle</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">When a background task is triggered, it starts immediately, saving a reference to\nthe task in <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">app.background_tasks</code>. When the task completes, it is removed from\nthe set.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Multiple instances of the same background task may run concurrently, and the\nframework makes no attempt to avoid duplicate tasks from starting.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">It is up to the developer to ensure that duplicate tasks are not created under\nthe circumstances that are undesirable. In the example above, the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">_n_tasks</code>\nbackend var is used to control whether <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">my_task</code> will enter the increment loop,\nor exit early.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/events/background-events/#background-task-limitations\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"background-task-limitations\">Background Task Limitations</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Background tasks mostly work like normal <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">EventHandler</code> methods, with certain exceptions:</p><ul class=\"css-1usfqyd\">\n<li class=\"font-normal text-slate-12 mb-4\">Background tasks must be <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">async</code> functions.</li>\n<li class=\"font-normal text-slate-12 mb-4\">Background tasks cannot modify the state outside of an <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">async with self</code> context block.</li>\n<li class=\"font-normal text-slate-12 mb-4\">Background tasks may read the state outside of an <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">async with self</code> context block, but the value may be stale.</li>\n<li class=\"font-normal text-slate-12 mb-4\">Background tasks may not be directly called from other event handlers or background tasks. Instead use <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">yield</code> or <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">return</code> to trigger the background task.</li>\n</ul></article>"
  ]
}
{
  "url": "https://reflex.dev/docs/advanced-onboarding/how-reflex-works/\n",
  "sections": [
    "<h1 class=\"rt-Heading rt-r-size-6 font-x-large lg:font-xx-large scroll-m-[5rem] mt-4\" id=\"how-reflex-works\">How Reflex Works</h1><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">We'll use the following basic app that displays Github profile images as an example to explain the different parts of the architecture.</p><div class=\"rt-Box py-4 gap-4 flex flex-col w-full\"><div class=\"rt-Box flex flex-col p-6 rounded-xl overflow-x-auto border border-slate-4 bg-slate-2 items-center justify-center w-full\"><div class=\"rt-Flex rt-r-fd-row rt-r-ai-start rt-r-gap-3 rx-Stack css-zcxndt\"><a class=\"rt-Text rt-reset rt-Link rt-underline-auto css-1macts\" data-accent-color=\"\" href=\"https://github.com/reflex-dev\"><span class=\"rt-reset rt-AvatarRoot rt-r-size-3 rt-variant-soft\" data-accent-color=\"\"><img class=\"rt-AvatarImage\" src=\"https://avatars.githubusercontent.com/u/104714959\"/></span></a><div class=\"rt-TextFieldRoot rt-r-size-2 rt-variant-surface\"><input class=\"rt-reset rt-TextFieldInput\" placeholder=\"Your Github username\" spellcheck=\"false\"/></div></div></div><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> requests</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> reflex </span><span style=\"color:#C678DD\">as</span><span style=\"color:#ABB2BF\"> rx</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> GithubState</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">State</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    url: </span><span style=\"color:#56B6C2\">str</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#98C379\"> \"https://github.com/reflex-dev\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    profile_image: </span><span style=\"color:#56B6C2\">str</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#ABB2BF\"> (</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">        \"https://avatars.githubusercontent.com/u/104714959\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">    @rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">event</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#61AFEF\"> set_profile</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#D19A66;font-style:italic\">username</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        if</span><span style=\"color:#ABB2BF\"> username </span><span style=\"color:#56B6C2\">==</span><span style=\"color:#98C379\"> \"\"</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            return</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        github_data </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> requests.</span><span style=\"color:#61AFEF\">get</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            f</span><span style=\"color:#98C379\">\"https://api.github.com/users/</span><span style=\"color:#D19A66\">{</span><span style=\"color:#ABB2BF\">username</span><span style=\"color:#D19A66\">}</span><span style=\"color:#98C379\">\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        ).</span><span style=\"color:#61AFEF\">json</span><span style=\"color:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">        self</span><span style=\"color:#ABB2BF\">.url </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> github_data[</span><span style=\"color:#98C379\">\"url\"</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">        self</span><span style=\"color:#ABB2BF\">.profile_image </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> github_data[</span><span style=\"color:#98C379\">\"avatar_url\"</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">def</span><span style=\"color:#61AFEF\"> index</span><span style=\"color:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    return</span><span style=\"color:#ABB2BF\"> rx.</span><span style=\"color:#61AFEF\">hstack</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        rx.</span><span style=\"color:#61AFEF\">link</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            rx.</span><span style=\"color:#61AFEF\">avatar</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E06C75;font-style:italic\">src</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">GithubState.profile_image),</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            href</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">GithubState.url,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        rx.</span><span style=\"color:#61AFEF\">input</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            placeholder</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\">\"Your Github username\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            on_blur</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">GithubState.set_profile,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    )</span></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></div><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/advanced-onboarding/how-reflex-works/#the-reflex-architecture\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"the-reflex-architecture\">The Reflex Architecture</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Full-stack web apps are made up of a frontend and a backend. The frontend is the user interface, and is served as a web page that runs on the user's browser. The backend handles the logic and state management (such as databases and APIs), and is run on a server.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">In traditional web development, these are usually two separate apps, and are often written in different frameworks or languages. For example, you may combine a Flask backend with a React frontend. With this approach, you have to maintain two separate apps and end up writing a lot of boilerplate code to connect the frontend and backend.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">We wanted to simplify this process in Reflex by defining both the frontend and backend in a single codebase, while using Python for everything. Developers should only worry about their app's logic and not about the low-level implementation details.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/advanced-onboarding/how-reflex-works/#tldr\">",
    "<h3 class=\"rt-Heading rt-r-size-6 font-large scroll-m-[5rem] mt-4\" id=\"tldr\">TLDR</h3><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Under the hood, Reflex apps compile down to a <a class=\"rt-Text rt-reset rt-Link rt-underline-always css-1io25ou\" data-accent-color=\"\" href=\"https://react.dev\">React</a> frontend app and a <a class=\"rt-Text rt-reset rt-Link rt-underline-always css-1io25ou\" data-accent-color=\"\" href=\"https://github.com/tiangolo/fastapi\">FastAPI</a> backend app. Only the UI is compiled to Javascript; all the app logic and state management stays in Python and is run on the server. Reflex uses <a class=\"rt-Text rt-reset rt-Link rt-underline-always css-1io25ou\" data-accent-color=\"\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API\">WebSockets</a> to send events from the frontend to the backend, and to send state updates from the backend to the frontend.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">The diagram below provides a detailed overview of how a Reflex app works. We'll go through each part in more detail in the following sections.</p><div aria-owns=\"rmiz-modal-50082f68eb7e\" data-rmiz=\"\"><div data-rmiz-content=\"found\" style=\"visibility:visible\"><img src=\"/architecture.png\"/></div><div data-rmiz-ghost=\"\" style=\"height: 356px; left: 5831px; width: 747px; top: 2062px;\"><button aria-label=\"Expand image\" data-rmiz-btn-zoom=\"\" type=\"button\"><svg aria-hidden=\"true\" data-rmiz-btn-zoom-icon=\"true\" fill=\"currentColor\" focusable=\"false\" viewbox=\"0 0 16 16\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M 9 1 L 9 2 L 12.292969 2 L 2 12.292969 L 2 9 L 1 9 L 1 14 L 6 14 L 6 13 L 2.707031 13 L 13 2.707031 L 13 6 L 14 6 L 14 1 Z\"></path></svg></button></div></div><div class=\"rt-Box css-1uo6o3\"></div><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/advanced-onboarding/how-reflex-works/#frontend\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"frontend\">Frontend</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">We wanted Reflex apps to look and feel like a traditional web app to the end user, while still being easy to build and maintain for the developer. To do this, we built on top of mature and popular web technologies.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">When you <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">reflex run</code> your app, Reflex compiles the frontend down to a single-page <a class=\"rt-Text rt-reset rt-Link rt-underline-always css-1io25ou\" data-accent-color=\"\" href=\"https://nextjs.org\">Next.js</a> app and serves it on a port (by default <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">3000</code>) that you can access in your browser.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">The frontend's job is to reflect the app's state, and send events to the backend when the user interacts with the UI. No actual logic is run on the frontend.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/advanced-onboarding/how-reflex-works/#components\">",
    "<h3 class=\"rt-Heading rt-r-size-6 font-large scroll-m-[5rem] mt-4\" id=\"components\">Components</h3><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Reflex frontends are built using components that can be composed together to create complex UIs. Instead of using a templating language that mixes HTML and Python, we just use Python functions to define the UI.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">def</span><span style=\"color:#61AFEF\"> index</span><span style=\"color:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    return</span><span style=\"color:#ABB2BF\"> rx.</span><span style=\"color:#61AFEF\">hstack</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        rx.</span><span style=\"color:#61AFEF\">link</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            rx.</span><span style=\"color:#61AFEF\">avatar</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E06C75;font-style:italic\">src</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">GithubState.profile_image),</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            href</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">GithubState.url,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        rx.</span><span style=\"color:#61AFEF\">input</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            placeholder</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\">\"Your Github username\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            on_blur</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">GithubState.set_profile,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    )</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">In our example app, we have components such as <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">rx.hstack</code>, <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">rx.avatar</code>, and <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">rx.input</code>. These components can have different <strong>props</strong> that affect their appearance and functionality - for example the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">rx.input</code> component has a <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">placeholder</code> prop to display the default text.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">We can make our components respond to user interactions with events such as <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">on_blur</code>, which we will discuss more below.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Under the hood, these components compile down to React components. For example, the above code compiles down to the following React code:</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#ABB2BF\">&lt;</span><span style=\"color:#E5C07B\">HStack</span><span style=\"color:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    &lt;</span><span style=\"color:#E5C07B\">Link</span><span style=\"color:#D19A66;font-style:italic\"> href</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#C678DD\">{</span><span style=\"color:#E5C07B\">GithubState</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E06C75\">url</span><span style=\"color:#C678DD\">}</span><span style=\"color:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        &lt;</span><span style=\"color:#E5C07B\">Avatar</span><span style=\"color:#D19A66;font-style:italic\"> src</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#C678DD\">{</span><span style=\"color:#E5C07B\">GithubState</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E06C75\">profile_image</span><span style=\"color:#C678DD\">}</span><span style=\"color:#ABB2BF\">/&gt;</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    &lt;/</span><span style=\"color:#E5C07B\">Link</span><span style=\"color:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    &lt;</span><span style=\"color:#E5C07B\">Input</span></span>\n<span class=\"line\"><span style=\"color:#D19A66;font-style:italic\">        placeholder</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\">\"Your Github username\"</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">        // This would actually be a websocket call to the backend.</span></span>\n<span class=\"line\"><span style=\"color:#D19A66;font-style:italic\">        onBlur</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#C678DD\">{</span><span style=\"color:#E5C07B\">GithubState</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E06C75\">set_profile</span><span style=\"color:#C678DD\">}</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    &gt;</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">&lt;/</span><span style=\"color:#E5C07B\">HStack</span><span style=\"color:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Many of our core components are based on <a class=\"rt-Text rt-reset rt-Link rt-underline-always css-1io25ou\" data-accent-color=\"\" href=\"https://radix-ui.com/\">Radix</a>, a popular React component library. We also have many other components for graphing, datatables, and more.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">We chose React because it is a popular library with a huge ecosystem. Our goal isn't to recreate the web ecosystem, but to make it accessible to Python developers.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">This also lets our users bring their own components if we don't have a component they need. Users can <a class=\"rt-Text rt-reset rt-Link rt-underline-always css-1io25ou\" data-accent-color=\"\" href=\"/docs/wrapping-react/overview/\">wrap their own React components</a> and then <a class=\"rt-Text rt-reset rt-Link rt-underline-always css-1io25ou\" data-accent-color=\"\" href=\"/docs/custom-components/overview/\">publish them</a> for others to use. Over time we will build out our <a class=\"rt-Text rt-reset rt-Link rt-underline-always css-1io25ou\" data-accent-color=\"\" href=\"/docs/custom-components/\">third party component ecosystem</a> so that users can easily find and use components that others have built.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/advanced-onboarding/how-reflex-works/#styling\">",
    "<h3 class=\"rt-Heading rt-r-size-6 font-large scroll-m-[5rem] mt-4\" id=\"styling\">Styling</h3><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">We wanted to make sure Reflex apps look good out of the box, while still giving developers full control over the appearance of their app.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">We have a core <a class=\"rt-Text rt-reset rt-Link rt-underline-always css-1io25ou\" data-accent-color=\"\" href=\"/docs/styling/theming/\">theming system</a> that lets you set high level styling options such as dark mode and accent color throughout your app to give it a unified look and feel.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Beyond this, Reflex components can be styled using the full power of CSS. We leverage the <a class=\"rt-Text rt-reset rt-Link rt-underline-always css-1io25ou\" data-accent-color=\"\" href=\"https://emotion.sh/docs/introduction\">Emotion</a> library to allow \"CSS-in-Python\" styling, so you can pass any CSS prop as a keyword argument to a component. This includes <a class=\"rt-Text rt-reset rt-Link rt-underline-always css-1io25ou\" data-accent-color=\"\" href=\"/docs/styling/responsive/\">responsive props</a> by passing a list of values.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/advanced-onboarding/how-reflex-works/#backend\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"backend\">Backend</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Now let's look at how we added interactivity to our apps.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">In Reflex only the frontend compiles to Javascript and runs on the user's browser, while all the state and logic stays in Python and is run on the server. When you <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">reflex run</code>, we start a FastAPI server (by default on port <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">8000</code>) that the frontend connects to through a websocket.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">All the state and logic are defined within a <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">State</code> class.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> GithubState</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">State</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    url: </span><span style=\"color:#56B6C2\">str</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#98C379\"> \"https://github.com/reflex-dev\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    profile_image: </span><span style=\"color:#56B6C2\">str</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#ABB2BF\"> (</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">        \"https://avatars.githubusercontent.com/u/104714959\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#61AFEF\"> set_profile</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#D19A66;font-style:italic\">username</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        if</span><span style=\"color:#ABB2BF\"> username </span><span style=\"color:#56B6C2\">==</span><span style=\"color:#98C379\"> \"\"</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            return</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        github_data </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> requests.</span><span style=\"color:#61AFEF\">get</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            f</span><span style=\"color:#98C379\">\"https://api.github.com/users/</span><span style=\"color:#D19A66\">{</span><span style=\"color:#ABB2BF\">username</span><span style=\"color:#D19A66\">}</span><span style=\"color:#98C379\">\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        ).</span><span style=\"color:#61AFEF\">json</span><span style=\"color:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">        self</span><span style=\"color:#ABB2BF\">.url </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> github_data[</span><span style=\"color:#98C379\">\"url\"</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">        self</span><span style=\"color:#ABB2BF\">.profile_image </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> github_data[</span><span style=\"color:#98C379\">\"avatar_url\"</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">The state is made up of <strong>vars</strong> and <strong>event handlers</strong>.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Vars are any values in your app that can change over time. They are defined as class attributes on your <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">State</code> class, and may be any Python type that can be serialized to JSON. In our example, <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">url</code> and <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">profile_image</code> are vars.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Event handlers are methods in your <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">State</code> class that are called when the user interacts with the UI. They are the only way that we can modify the vars in Reflex, and can be called in response to user actions, such as clicking a button or typing in a text box. In our example, <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">set_profile</code> is an event handler that updates the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">url</code> and <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">profile_image</code> vars.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Since event handlers are run on the backend, you can use any Python library within them. In our example, we use the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">requests</code> library to make an API call to Github to get the user's profile image.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/advanced-onboarding/how-reflex-works/#event-processing\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"event-processing\">Event Processing</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Now we get into the interesting part - how we handle events and state updates.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Normally when writing web apps, you have to write a lot of boilerplate code to connect the frontend and backend. With Reflex, you don't have to worry about that - we handle the communication between the frontend and backend for you. Developers just have to write their event handler logic, and when the vars are updated the UI is automatically updated.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">You can refer to the diagram above for a visual representation of the process. Let's walk through it with our Github profile image example.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/advanced-onboarding/how-reflex-works/#event-triggers\">",
    "<h3 class=\"rt-Heading rt-r-size-6 font-large scroll-m-[5rem] mt-4\" id=\"event-triggers\">Event Triggers</h3><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">The user can interact with the UI in many ways, such as clicking a button, typing in a text box, or hovering over an element. In Reflex, we call these <strong>event triggers</strong>.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#ABB2BF\">rx.</span><span style=\"color:#61AFEF\">input</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">    placeholder</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\">\"Your Github username\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">    on_blur</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">GithubState.set_profile,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">)</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">In our example we bind the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">on_blur</code> event trigger to the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">set_profile</code> event handler. This means that when the user types in the input field and then clicks away, the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">set_profile</code> event handler is called.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/advanced-onboarding/how-reflex-works/#event-queue\">",
    "<h3 class=\"rt-Heading rt-r-size-6 font-large scroll-m-[5rem] mt-4\" id=\"event-queue\">Event Queue</h3><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">On the frontend, we maintain an event queue of all pending events. An event consists of three major pieces of data:</p><ul class=\"css-1usfqyd\">\n<li class=\"font-normal text-slate-12 mb-4\"><strong>client token</strong>: Each client (browser tab) has a unique token to identify it. This let's the backend know which state to update.</li>\n<li class=\"font-normal text-slate-12 mb-4\"><strong>event handler</strong>: The event handler to run on the state.</li>\n<li class=\"font-normal text-slate-12 mb-4\"><strong>arguments</strong>: The arguments to pass to the event handler.</li>\n</ul><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Let's assume I type my username \"picklelo\" into the input. In this example, our event would look something like this:</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  \"client_token\"</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">\"abc123\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  \"event_handler\"</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">\"GithubState.set_profile\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  \"arguments\"</span><span style=\"color:#ABB2BF\">: [</span><span style=\"color:#98C379\">\"picklelo\"</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">}</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">On the frontend, we maintain an event queue of all pending events.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">When an event is triggered, it is added to the queue. We have a <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">processing</code> flag to make sure only one event is processed at a time. This ensures that the state is always consistent and there aren't any race conditions with two event handlers modifying the state at the same time.</p><div class=\"rt-Flex rt-r-fd-column rt-r-ai-start rt-r-gap-3 rx-Stack css-tjvfc7\"><div class=\"rt-Flex rt-r-fd-row rt-r-ai-start rt-r-gap-1 rx-Stack css-99pxke\"><div class=\"rt-Box css-1ha2jce\"><svg class=\"lucide lucide-info css-1yx2zam\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><path d=\"M12 16v-4\"></path><path d=\"M12 8h.01\"></path></svg></div><div class=\"css-1w54oj2\"><p class=\"rt-Text css-56tzch\">There are exceptions to this, such as <a class=\"rt-Text rt-reset rt-Link rt-underline-auto css-1macts\" data-accent-color=\"\" href=\"/docs/events/background-events/\">background events</a> which allow you to run events in the background without blocking the UI.</p></div></div></div><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Once the event is ready to be processed, it is sent to the backend through a WebSocket connection.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/advanced-onboarding/how-reflex-works/#state-manager\">",
    "<h3 class=\"rt-Heading rt-r-size-6 font-large scroll-m-[5rem] mt-4\" id=\"state-manager\">State Manager</h3><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Once the event is received, it is processed on the backend.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Reflex uses a <strong>state manager</strong> which maintains a mapping between client tokens and their state. By default, the state manager is just an in-memory dictionary, but it can be extended to use a database or cache. In production we use Redis as our state manager.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/advanced-onboarding/how-reflex-works/#event-handling\">",
    "<h3 class=\"rt-Heading rt-r-size-6 font-large scroll-m-[5rem] mt-4\" id=\"event-handling\">Event Handling</h3><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Once we have the user's state, the next step is to run the event handler with the arguments.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">def</span><span style=\"color:#61AFEF\"> set_profile</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#D19A66;font-style:italic\">username</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    if</span><span style=\"color:#ABB2BF\"> username </span><span style=\"color:#56B6C2\">==</span><span style=\"color:#98C379\"> \"\"</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        return</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    github_data </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> requests.</span><span style=\"color:#61AFEF\">get</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        f</span><span style=\"color:#98C379\">\"https://api.github.com/users/</span><span style=\"color:#D19A66\">{</span><span style=\"color:#ABB2BF\">username</span><span style=\"color:#D19A66\">}</span><span style=\"color:#98C379\">\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    ).</span><span style=\"color:#61AFEF\">json</span><span style=\"color:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">    self</span><span style=\"color:#ABB2BF\">.url </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> github_data[</span><span style=\"color:#98C379\">\"url\"</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">    self</span><span style=\"color:#ABB2BF\">.profile_image </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> github_data[</span><span style=\"color:#98C379\">\"avatar_url\"</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">In our example, the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">set_profile</code> event handler is run on the user's state. This makes an API call to Github to get the user's profile image, and then updates the state's <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">url</code> and <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">profile_image</code> vars.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/advanced-onboarding/how-reflex-works/#state-updates\">",
    "<h3 class=\"rt-Heading rt-r-size-6 font-large scroll-m-[5rem] mt-4\" id=\"state-updates\">State Updates</h3><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Every time an event handler returns (or <a class=\"rt-Text rt-reset rt-Link rt-underline-always css-1io25ou\" data-accent-color=\"\" href=\"/docs/events/yield-events/\">yields</a>), we save the state in the state manager and send the <strong>state updates</strong> to the frontend to update the UI.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">To maintain performance as your state grows, internally Reflex keeps track of vars that were updated during the event handler (<strong>dirty vars</strong>). When the event handler is done processing, we find all the dirty vars and create a state update to send to the frontend.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">In our case, the state update may look something like this:</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#ABB2BF\">{</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  \"url\"</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">\"https://github.com/picklelo\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  \"profile_image\"</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">\"https://avatars.githubusercontent.com/u/104714959\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">}</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">We store the new state in our state manager, and then send the state update to the frontend. The frontend then updates the UI to reflect the new state. In our example, the new Github profile image is displayed.</p></article>"
  ]
}
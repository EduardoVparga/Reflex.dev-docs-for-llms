{
  "url": "https://reflex.dev/docs/utility-methods/lifespan-tasks/\n",
  "sections": [
    "<h1 class=\"rt-Heading rt-r-size-6 font-x-large lg:font-xx-large scroll-m-[5rem] mt-4\" id=\"lifespan-tasks\">Lifespan Tasks</h1><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\"><em>Added in v0.5.2</em></p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Lifespan tasks are coroutines that run when the backend server is running. They\nare useful for setting up the initial global state of the app, running periodic\ntasks, and cleaning up resources when the server is shut down.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Lifespan tasks are defined as async coroutines or async contextmanagers. To avoid\nblocking the event thread, never use <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">time.sleep</code> or perform non-async I/O within\na lifespan task.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">In dev mode, lifespan tasks will stop and restart when a hot-reload occurs.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/utility-methods/lifespan-tasks/#tasks\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"tasks\">Tasks</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Any async coroutine can be used as a lifespan task. It will be started when the\nbackend comes up and will run until it returns or is cancelled due to server\nshutdown. Long-running tasks should catch <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">asyncio.CancelledError</code> to perform\nany necessary clean up.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">async</span><span style=\"color:#C678DD\"> def</span><span style=\"color:#61AFEF\"> long_running_task</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#D19A66;font-style:italic\">foo</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#D19A66;font-style:italic\">bar</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#56B6C2\">    print</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#C678DD\">f</span><span style=\"color:#98C379\">\"Starting </span><span style=\"color:#D19A66\">{</span><span style=\"color:#ABB2BF\">foo</span><span style=\"color:#D19A66\">}</span><span style=\"color:#D19A66\"> {</span><span style=\"color:#ABB2BF\">bar</span><span style=\"color:#D19A66\">}</span><span style=\"color:#98C379\"> task\"</span><span style=\"color:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    some_api </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#61AFEF\"> SomeApi</span><span style=\"color:#ABB2BF\">(foo)</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    try</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        while</span><span style=\"color:#D19A66\"> True</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            updates </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> some_api.</span><span style=\"color:#61AFEF\">poll_for_updates</span><span style=\"color:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            other_api.</span><span style=\"color:#61AFEF\">push_changes</span><span style=\"color:#ABB2BF\">(updates, bar)</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            await</span><span style=\"color:#ABB2BF\"> asyncio.</span><span style=\"color:#61AFEF\">sleep</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#D19A66\">                5</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            )  </span><span style=\"color:#7F848E;font-style:italic\"># add some polling delay to avoid running too often</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    except</span><span style=\"color:#ABB2BF\"> asyncio.CancelledError:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        some_api.</span><span style=\"color:#61AFEF\">close</span><span style=\"color:#ABB2BF\">()  </span><span style=\"color:#7F848E;font-style:italic\"># clean up the API if needed</span></span>\n<span class=\"line\"><span style=\"color:#56B6C2\">        print</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#98C379\">\"Task was stopped\"</span><span style=\"color:#ABB2BF\">)</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/utility-methods/lifespan-tasks/#register-the-task\">",
    "<h3 class=\"rt-Heading rt-r-size-6 font-large scroll-m-[5rem] mt-4\" id=\"register-the-task\">Register the Task</h3><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">To register a lifespan task, use <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">app.register_lifespan_task(coro_func, **kwargs)</code>.\nAny keyword arguments specified during registration will be passed to the task.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">If the task accepts the special argument, <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">app</code>, it will be an instance of the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">FastAPI</code> object\nassociated with the app.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#ABB2BF\">app </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> rx.</span><span style=\"color:#61AFEF\">App</span><span style=\"color:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">app.</span><span style=\"color:#61AFEF\">register_lifespan_task</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    long_running_task, </span><span style=\"color:#E06C75;font-style:italic\">foo</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#D19A66\">42</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#E06C75;font-style:italic\">bar</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">os.environ[</span><span style=\"color:#98C379\">\"BAR_PARAM\"</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">)</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/utility-methods/lifespan-tasks/#context-managers\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"context-managers\">Context Managers</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Lifespan tasks can also be defined as async contextmanagers. This is useful for\nsetting up and tearing down resources and behaves similarly to the ASGI lifespan\nprotocol.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Code up to the first <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">yield</code> will run when the backend comes up. As the backend\nis shutting down, the code after the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">yield</code> will run to clean up.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Here is an example borrowed from the FastAPI docs and modified to work with this\ninterface.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">from</span><span style=\"color:#ABB2BF\"> contextlib </span><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> asynccontextmanager</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">def</span><span style=\"color:#61AFEF\"> fake_answer_to_everything_ml_model</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#D19A66;font-style:italic\">x</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#56B6C2\">float</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    return</span><span style=\"color:#ABB2BF\"> x </span><span style=\"color:#56B6C2\">*</span><span style=\"color:#D19A66\"> 42</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">ml_models </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> {}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">@asynccontextmanager</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">async</span><span style=\"color:#C678DD\"> def</span><span style=\"color:#61AFEF\"> setup_model</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#D19A66;font-style:italic\">app</span><span style=\"color:#ABB2BF\">: FastAPI):</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">    # Load the ML model</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    ml_models[</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">        \"answer_to_everything\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    ] </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> fake_answer_to_everything_ml_model</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    yield</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">    # Clean up the ML models and release the resources</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    ml_models.</span><span style=\"color:#61AFEF\">clear</span><span style=\"color:#ABB2BF\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#D19A66\">...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">app </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> rx.</span><span style=\"color:#61AFEF\">App</span><span style=\"color:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">app.</span><span style=\"color:#61AFEF\">register_lifespan_task</span><span style=\"color:#ABB2BF\">(setup_model)</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre></article>"
  ]
}
{
  "url": "https://reflex.dev/docs/database/tables/\n",
  "sections": [
    "<h1 class=\"rt-Heading rt-r-size-6 font-x-large lg:font-xx-large scroll-m-[5rem] mt-4\" id=\"tables\">Tables</h1><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Tables are database objects that contain all the data in a database.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">In tables, data is logically organized in a row-and-column format similar to a\nspreadsheet. Each row represents a unique record, and each column represents a\nfield in the record.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/database/tables/#creating-a-table\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"creating-a-table\">Creating a Table</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">To create a table, make a class that inherits from <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">rx.Model</code>.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">The following example shows how to create a table called <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">User</code>.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> User</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">Model</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#E06C75;font-style:italic\">table</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#D19A66\">True</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    username: </span><span style=\"color:#56B6C2\">str</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    email: </span><span style=\"color:#56B6C2\">str</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">The <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">table=True</code> argument tells Reflex to create a table in the database for\nthis class.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/database/tables/#primary-key\">",
    "<h3 class=\"rt-Heading rt-r-size-6 font-large scroll-m-[5rem] mt-4\" id=\"primary-key\">Primary Key</h3><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">By default, Reflex will create a primary key column called <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">id</code> for each table.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">However, if an <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">rx.Model</code> defines a different field with <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">primary_key=True</code>, then the\ndefault <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">id</code> field will not be created. A table may also redefine <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">id</code> as needed.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">It is not currently possible to create a table without a primary key.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/database/tables/#advanced-column-types\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"advanced-column-types\">Advanced Column Types</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">SQLModel automatically maps basic python types to SQLAlchemy column types, but\nfor more advanced use cases, it is possible to define the column type using\n<code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">sqlalchemy</code> directly. For example, we can add a last updated timestamp to the\npost example as a proper <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">DateTime</code> field with timezone.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> datetime</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> sqlmodel</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> sqlalchemy</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> Post</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">Model</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#E06C75;font-style:italic\">table</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#D19A66\">True</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#D19A66\">    ...</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    update_ts: datetime.datetime </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> sqlmodel.</span><span style=\"color:#61AFEF\">Field</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">        default</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#D19A66\">None</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">        sa_column</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">sqlalchemy.</span><span style=\"color:#61AFEF\">Column</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">            \"update_ts\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            sqlalchemy.</span><span style=\"color:#61AFEF\">DateTime</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E06C75;font-style:italic\">timezone</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#D19A66\">True</span><span style=\"color:#ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            server_default</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">sqlalchemy.func.</span><span style=\"color:#61AFEF\">now</span><span style=\"color:#ABB2BF\">(),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    )</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">To make the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">Post</code> model more usable on the frontend, a <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">dict</code> method may be provided\nthat converts any fields to a JSON serializable value. In this case, the dict method is\noverriding the default <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">datetime</code> serializer to strip off the microsecond part.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> Post</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">Model</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#E06C75;font-style:italic\">table</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#D19A66\">True</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#D19A66\">    ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#56B6C2\"> dict</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">, *</span><span style=\"color:#D19A66;font-style:italic\">args</span><span style=\"color:#ABB2BF\">, **</span><span style=\"color:#D19A66;font-style:italic\">kwargs</span><span style=\"color:#ABB2BF\">) -&gt; </span><span style=\"color:#56B6C2\">dict</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        d </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#56B6C2\"> super</span><span style=\"color:#ABB2BF\">().</span><span style=\"color:#61AFEF\">dict</span><span style=\"color:#ABB2BF\">(*args, **kwargs)</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        d[</span><span style=\"color:#98C379\">\"update_ts\"</span><span style=\"color:#ABB2BF\">] </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#E5C07B\"> self</span><span style=\"color:#ABB2BF\">.update_ts.</span><span style=\"color:#61AFEF\">replace</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            microsecond</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#D19A66\">0</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        ).</span><span style=\"color:#61AFEF\">isoformat</span><span style=\"color:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        return</span><span style=\"color:#ABB2BF\"> d</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre></article>"
  ]
}
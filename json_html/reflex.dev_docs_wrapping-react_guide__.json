{
  "url": "https://reflex.dev/docs/wrapping-react/guide/\n",
  "sections": [
    "<h1 class=\"rt-Heading rt-r-size-6 font-x-large lg:font-xx-large scroll-m-[5rem] mt-4\" id=\"full-guide\">Full Guide</h1><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Let's walk step by step through how to wrap a React component in Reflex, using the color picker as our primary example. You can also see the full <a class=\"rt-Text rt-reset rt-Link rt-underline-always css-1io25ou\" data-accent-color=\"\" href=\"/docs/api-reference/component/\">API reference</a>.</p><div class=\"rt-Box css-11yhr0l\"><div class=\"rt-Flex rt-r-fd-column rt-r-ai-start rt-r-gap-3 rx-Stack css-zcxndt\">",
    "<h1 class=\"rt-Heading rt-r-size-6 css-1jn2rh7\">#db114b</h1><div class=\"react-colorful\"><div class=\"react-colorful__saturation\" style=\"background-color:hsl(0, 100%, 50%)\"><div aria-label=\"Color\" aria-valuetext=\"Saturation 0%, Brightness 0%\" class=\"react-colorful__interactive\" role=\"slider\" tabindex=\"0\"><div class=\"react-colorful__pointer react-colorful__saturation-pointer\" style=\"top:100%;left:0%\"><div class=\"react-colorful__pointer-fill\" style=\"background-color:hsl(0, 0%, 0%)\"></div></div></div></div><div class=\"react-colorful__hue react-colorful__last-control\"><div aria-label=\"Hue\" aria-valuemax=\"360\" aria-valuemin=\"0\" aria-valuenow=\"0\" class=\"react-colorful__interactive\" role=\"slider\" tabindex=\"0\"><div class=\"react-colorful__pointer react-colorful__hue-pointer\" style=\"top:50%;left:0%\"><div class=\"react-colorful__pointer-fill\" style=\"background-color:hsl(0, 100%, 50%)\"></div></div></div></div></div></div></div><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"/docs/wrapping-react/guide/#find-the-component\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"find-the-component\">Find The Component</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">There are two ways to find a component to wrap:</p>\n<ol class=\"css-1nbtsq0\">\n<li class=\"font-normal text-slate-12 mb-4\">Write the component yourself locally.</li>\n<li class=\"font-normal text-slate-12 mb-4\">Find a well-maintained React library on <a class=\"rt-Text rt-reset rt-Link rt-underline-always css-1io25ou\" data-accent-color=\"\" href=\"https://www.npmjs.com/\">npm</a> that contains the component you need.</li>\n</ol><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">In both cases, the process of wrapping the component is the same except for the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">library</code> field.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">In this guide we are wrapping the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">HexColorPicker</code> component from the <a class=\"rt-Text rt-reset rt-Link rt-underline-always css-1io25ou\" data-accent-color=\"\" href=\"https://www.npmjs.com/package/react-colorful\">react-colorful</a> library.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"/docs/wrapping-react/guide/#define-the-component\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"define-the-component\">Define the Component</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">The first step to wrapping any React component is to subclass <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">rx.Component</code>.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> ColorPicker</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">Component</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">    \"\"\"A color picker component.\"\"\"</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"/docs/wrapping-react/guide/#set-the-library-and-tag\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"set-the-library-and-tag\">Set the Library and Tag</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">The library is just the name of the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">npm</code> package, and the tag is the name of the React component from the package that you want to wrap. Some packages have multiple components, and you can wrap each one as a separate Reflex component.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">You can generally find the library and tag by looking at the import statement in the React code.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> { </span><span style=\"color:#E06C75\">HexColorPicker</span><span style=\"color:#ABB2BF\"> } </span><span style=\"color:#C678DD\">from</span><span style=\"color:#98C379\"> \"react-colorful\"</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">In this case, the library is <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">react-colorful</code> and the tag is <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">HexColorPicker</code>.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> ColorPicker</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">Component</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">    \"\"\"Color picker component.\"\"\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    library </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"react-colorful\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    tag </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"HexColorPicker\"</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">When you create your component, Reflex will automatically install the library for you.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"/docs/wrapping-react/guide/#local-components\">",
    "<h3 class=\"rt-Heading rt-r-size-6 font-large scroll-m-[5rem] mt-4\" id=\"local-components\">Local Components</h3><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">You can also wrap components that you have written yourself. Local components should be stored in your <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">assets</code> directory. For example, you could define a basic <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">Hello</code> component like this:</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">// assets/hello.js</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#E06C75\"> React</span><span style=\"color:#C678DD\"> from</span><span style=\"color:#98C379\"> 'react'</span><span style=\"color:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">export</span><span style=\"color:#C678DD\"> function</span><span style=\"color:#61AFEF\"> Hello</span><span style=\"color:#ABB2BF\">() {</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">  return</span><span style=\"color:#ABB2BF\"> (</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    &lt;</span><span style=\"color:#E06C75\">div</span><span style=\"color:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">      &lt;</span><span style=\"color:#E06C75\">h1</span><span style=\"color:#ABB2BF\">&gt;Hello!&lt;/</span><span style=\"color:#E06C75\">h1</span><span style=\"color:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    &lt;/</span><span style=\"color:#E06C75\">div</span><span style=\"color:#ABB2BF\">&gt;</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">  )</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">}</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Then specify the library as following (note: we use the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">public</code> directory here instead of <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">assets</code> as this is the directory that is served by the web server):</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> reflex </span><span style=\"color:#C678DD\">as</span><span style=\"color:#ABB2BF\"> rx</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> Hello</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">Component</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">    # Use an absolute path starting with /public</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    library </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"/public/hello\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">    # Define everything else as normal.</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    tag </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"Hello\"</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"/docs/wrapping-react/guide/#local-packages\">",
    "<h3 class=\"rt-Heading rt-r-size-6 font-large scroll-m-[5rem] mt-4\" id=\"local-packages\">Local Packages</h3><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">If the component is part of a local package, available on Github, or\ndownloadable via a web URL, it can also be wrapped in Reflex. Specify the path\nor URL after an <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">@</code> following the package name.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Any local paths are relative to the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">.web</code> folder, so you can use <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">../</code> prefix\nto reference the Reflex project root.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Some examples of valid specifiers for a package called\n<a class=\"rt-Text rt-reset rt-Link rt-underline-always css-1io25ou\" data-accent-color=\"\" href=\"https://github.com/masenf/hello-react\"><code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">@masenf/hello-react</code></a> are:</p><ul class=\"css-1usfqyd\">\n<li class=\"font-normal text-slate-12 mb-4\">GitHub: <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">@masenf/hello-react@github:masenf/hello-react</code></li>\n<li class=\"font-normal text-slate-12 mb-4\">URL: <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">@masenf/hello-react@https://github.com/masenf/hello-react/archive/refs/heads/main.tar.gz</code></li>\n<li class=\"font-normal text-slate-12 mb-4\">Local Archive: <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">@masenf/hello-react@../hello-react.tgz</code></li>\n<li class=\"font-normal text-slate-12 mb-4\">Local Directory: <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">@masenf/hello-react@../hello-react</code></li>\n</ul><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">It is important that the package name matches the name in <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">package.json</code> so\nReflex can generate the correct import statement in the generated javascript\ncode.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">These package specifiers can be used for <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">library</code> or <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">lib_dependencies</code>.</p><div class=\"rt-Box py-4 gap-4 flex flex-col w-full\"><div class=\"rt-Box flex flex-col p-6 rounded-xl overflow-x-auto border border-slate-4 bg-slate-2 items-center justify-center w-full\"><div class=\"_counter_1wts1_1\">",
    "<h2 class=\"_header_1wts1_10\">Counter</h2><button class=\"_button_1wts1_16\" type=\"button\">Increment by one</button><div>Total value: <strong>0</strong></div></div></div><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> GithubComponent</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">Component</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    library </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> (</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">        \"@masenf/hello-react@github:masenf/hello-react\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    )</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    tag </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"Counter\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#61AFEF\"> add_imports</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        return</span><span style=\"color:#ABB2BF\"> {</span><span style=\"color:#98C379\">\"\"</span><span style=\"color:#ABB2BF\">: [</span><span style=\"color:#98C379\">\"@masenf/hello-react/dist/style.css\"</span><span style=\"color:#ABB2BF\">]}</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">def</span><span style=\"color:#61AFEF\"> github_component_example</span><span style=\"color:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    return</span><span style=\"color:#ABB2BF\"> GithubComponent.</span><span style=\"color:#61AFEF\">create</span><span style=\"color:#ABB2BF\">()</span></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></div><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Although more complicated, this approach is useful when the local components\nhave additional dependencies or build steps required to prepare the component\nfor use.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Some important notes regarding this approach:</p><ul class=\"css-1usfqyd\">\n<li class=\"font-normal text-slate-12 mb-4\">The repo or archive must contain a <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">package.json</code> file.</li>\n<li class=\"font-normal text-slate-12 mb-4\"><code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">prepare</code> or <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">build</code> scripts will NOT be executed. The distribution archive,\ndirectory, or repo must already contain the built javascript files (this is common).</li>\n</ul><div class=\"css-116ytrl\" data-orientation=\"vertical\" data-variant=\"classic\"><div class=\"AccordionItem css-1g1zb7l\" data-orientation=\"vertical\" data-state=\"closed\">",
    "<h3 class=\"AccordionHeader css-k008qs\" data-orientation=\"vertical\" data-state=\"closed\"><button aria-controls=\"radix-:R1ki6kml6:\" aria-expanded=\"false\" class=\"AccordionTrigger css-nh0mh4\" data-orientation=\"vertical\" data-radix-collection-item=\"\" data-state=\"closed\" id=\"radix-:Rki6kml6:\" type=\"button\"><div class=\"rt-Flex rt-r-fd-row rt-r-ai-start rt-r-gap-2 rx-Stack css-bkjhwu\"><div class=\"rt-Box css-1ha2jce\"><svg class=\"lucide lucide-info css-1yx2zam\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><path d=\"M12 16v-4\"></path><path d=\"M12 8h.01\"></path></svg></div><div class=\"css-1l85t71\"><p class=\"rt-Text css-56tzch\">Ensure CSS files are exported in <code class=\"rt-reset rt-Code rt-variant-soft\" data-accent-color=\"\">package.json</code></p></div><div class=\"rt-Flex css-17xejub\"></div><svg class=\"lucide lucide-chevron-down AccordionChevron css-1ha2jce\" fill=\"none\" height=\"24\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m6 9 6 6 6-6\"></path></svg></div></button></h3><div aria-labelledby=\"radix-:Rki6kml6:\" class=\"AccordionContent css-14qn398\" data-orientation=\"vertical\" data-state=\"closed\" hidden=\"\" id=\"radix-:R1ki6kml6:\" role=\"region\" style=\"--radix-accordion-content-height: var(--radix-collapsible-content-height); --radix-accordion-content-width: var(--radix-collapsible-content-width);\"></div></div></div><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"/docs/wrapping-react/guide/#import-types\">",
    "<h3 class=\"rt-Heading rt-r-size-6 font-large scroll-m-[5rem] mt-4\" id=\"import-types\">Import Types</h3><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Sometimes the component is a default export from the module (meaning it doesn't require curly braces in the import statement).</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#E06C75\"> Spline</span><span style=\"color:#C678DD\"> from</span><span style=\"color:#98C379\"> '@splinetool/react-spline'</span><span style=\"color:#ABB2BF\">;</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">In these cases you must set <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">is_default = True</code> in your component class, as we did in the Spline example in the overview section:</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> Spline</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">Component</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">    \"\"\"Spline component.\"\"\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    library </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"@splinetool/react-spline\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    tag </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"Spline\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    is_default </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#D19A66\"> True</span><span style=\"color:#7F848E;font-style:italic\">  # Needed for default imports</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"/docs/wrapping-react/guide/#library-dependencies\">",
    "<h3 class=\"rt-Heading rt-r-size-6 font-large scroll-m-[5rem] mt-4\" id=\"library-dependencies\">Library Dependencies</h3><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">By default Reflex will install the library you have specified in the library property. However, sometimes you may need to install other libraries to use a component. In this case you can use the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">lib_dependencies</code> property to specify other libraries to install.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">As seen in the Spline example in the overview section, we need to import the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">@splinetool/runtime</code> library to use the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">Spline</code> component. We can specify this in our component class like this:</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> Spline</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">Component</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">    \"\"\"Spline component.\"\"\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    library </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"@splinetool/react-spline\"</span><span style=\"color:#7F848E;font-style:italic\">  # This is installed by default</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    lib_dependencies: list[</span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">] </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> [</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">        \"@splinetool/runtime@1.5.5\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    ]  </span><span style=\"color:#7F848E;font-style:italic\"># Specify extra npm packages to install.</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">In this example we are adding this dependency to pin its version. It would be automatically installed alongside the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">react-spline</code> library when the component is created.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">A useful time to add <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">lib_dependencies</code> is when we are wrapping a component and we want plugins or extensions for the library. A good example is the React component <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">react-markdown</code> with its <a class=\"rt-Text rt-reset rt-Link rt-underline-always css-1io25ou\" data-accent-color=\"\" href=\"https://www.npmjs.com/package/react-markdown#plugins\">extensions</a>.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"/docs/wrapping-react/guide/#versions\">",
    "<h3 class=\"rt-Heading rt-r-size-6 font-large scroll-m-[5rem] mt-4\" id=\"versions\">Versions</h3><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">You can specify the version of the library you want to install by appending <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">@</code> and the version number to the library name.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> Spline</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">Component</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">    \"\"\"Spline component.\"\"\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    library </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"@splinetool/react-spline@1.0.0\"</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">This is recommended to ensure that your app works consistently across different environments.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"/docs/wrapping-react/guide/#dynamic-imports\">",
    "<h3 class=\"rt-Heading rt-r-size-6 font-large scroll-m-[5rem] mt-4\" id=\"dynamic-imports\">Dynamic Imports</h3><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Some libraries you may want to wrap may require dynamic imports. This is because they they may not be compatible with Server-Side Rendering (SSR).</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">To handle this in Reflex, subclass <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">NoSSRComponent</code> when defining your component.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Often times when you see an import something like this:</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#E06C75\"> dynamic</span><span style=\"color:#C678DD\"> from</span><span style=\"color:#98C379\"> 'next/dynamic'</span><span style=\"color:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">const</span><span style=\"color:#E5C07B\"> MyLibraryComponent</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#61AFEF\"> dynamic</span><span style=\"color:#ABB2BF\">(() </span><span style=\"color:#C678DD\">=&gt;</span><span style=\"color:#61AFEF\"> import</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#98C379\">'./MyLibraryComponent'</span><span style=\"color:#ABB2BF\">), {</span></span>\n<span class=\"line\"><span style=\"color:#E06C75\">  ssr</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#D19A66\">false</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">});</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">You can wrap it in Reflex like this, here we are wrapping the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">react-plotly.js</code> library which requires dynamic imports:</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">from</span><span style=\"color:#ABB2BF\"> reflex.components.component </span><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> NoSSRComponent</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> PlotlyLib</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">NoSSRComponent</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">    \"\"\"A component that wraps a plotly lib.\"\"\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    library </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"react-plotly.js@2.6.0\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    lib_dependencies: List[</span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">] </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> [</span><span style=\"color:#98C379\">\"plotly.js@2.22.0\"</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">It may not always be clear when a library requires dynamic imports. A few things to keep in mind are if the component is very client side heavy i.e. the view and structure depends on things that are fetched at run time, or if it uses <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">window</code> or <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">document</code> objects directly it will need to be wrapped as a <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">NoSSRComponent</code>.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Some examples are:</p><ol class=\"css-1nbtsq0\">\n<li class=\"font-normal text-slate-12 mb-4\">Video and Audio Players</li>\n<li class=\"font-normal text-slate-12 mb-4\">Maps</li>\n<li class=\"font-normal text-slate-12 mb-4\">Drawing Canvas</li>\n<li class=\"font-normal text-slate-12 mb-4\">3D Graphics</li>\n<li class=\"font-normal text-slate-12 mb-4\">QR Scanners</li>\n<li class=\"font-normal text-slate-12 mb-4\">Reactflow</li>\n</ol><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">The reason for this is that it does not make sense for your server to render these components as the server does not have access to your camera, it cannot draw on your canvas or render a video from a file.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">In addition, if in the component documentation it mentions nextJS compatibility or server side rendering compatibility, it is a good sign that it requires dynamic imports.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"/docs/wrapping-react/guide/#additional-imports\">",
    "<h3 class=\"rt-Heading rt-r-size-6 font-large scroll-m-[5rem] mt-4\" id=\"additional-imports\">Additional Imports</h3><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Sometimes you may need to import additional files or stylesheets to use a component. You can do this by overriding the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">add_imports</code> method in your component class. The method returns a dictionary where the key is the library and the values are a list of imports.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> ReactFlowLib</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">Component</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">    \"\"\"A component that wraps a react flow lib.\"\"\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    library </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"reactflow\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#61AFEF\"> add_imports</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        return</span><span style=\"color:#ABB2BF\"> {</span><span style=\"color:#98C379\">\"\"</span><span style=\"color:#ABB2BF\">: [</span><span style=\"color:#98C379\">\"reactflow/dist/style.css\"</span><span style=\"color:#ABB2BF\">]}</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">You can use the empty string as the key to import files that are not part of a library.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"/docs/wrapping-react/guide/#aliases\">",
    "<h3 class=\"rt-Heading rt-r-size-6 font-large scroll-m-[5rem] mt-4\" id=\"aliases\">Aliases</h3><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">If you are wrapping another component with the same tag as a component in your project you can use aliases to differentiate between them and avoid naming conflicts.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Lets check out the code below, in this case if we needed to wrap another color picker library with the same tag we use an alias to avoid a conflict.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> AnotherColorPicker</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">Component</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    library </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"some-other-colorpicker\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    tag </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"HexColorPicker\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    alias </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"OtherHexColorPicker\"</span><span style=\"color:#7F848E;font-style:italic\">  # This can now coexist with the original HexColorPicker</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"/docs/wrapping-react/guide/#custom-code\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"custom-code\">Custom Code</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Sometimes you may need to add custom code to your component, such as defining constants and functions used. Custom code will be inserted <em>outside</em> of the react component function.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#E06C75\"> React</span><span style=\"color:#C678DD\"> from</span><span style=\"color:#98C379\"> \"react\"</span><span style=\"color:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">// Other imports...</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">// Custom code</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">const</span><span style=\"color:#E5C07B\"> customCode</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#98C379\"> \"const customCode = 'customCode';\"</span><span style=\"color:#ABB2BF\">;</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">To add custom code to your component you can use the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">add_custom_code</code> method in your component class.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">from</span><span style=\"color:#ABB2BF\"> reflex.components.component </span><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> NoSSRComponent</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> PlotlyLib</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">NoSSRComponent</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">    \"\"\"A component that wraps a plotly lib.\"\"\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    library </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"react-plotly.js@2.6.0\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    lib_dependencies: List[</span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">] </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> [</span><span style=\"color:#98C379\">\"plotly.js@2.22.0\"</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#61AFEF\"> add_custom_code</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">) -&gt; </span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        return</span><span style=\"color:#98C379\"> \"const customCode = 'customCode';\"</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"/docs/wrapping-react/guide/#props\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"props\">Props</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Props are the variables that you can pass to the component. In the case of our color picker, we have a single prop <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">color</code>. Props are defined using <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">rx.Var</code> with the type of the prop. Specifying the type helps the compiler catch errors and provides better intellisense.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> ColorPicker</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">Component</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    library </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"react-colorful\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    tag </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"HexColorPicker\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">    # Define all props using rx.Var</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    color: rx.Var[</span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">color_picker </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> ColorPicker.create</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Then when you create the component, you can pass in the props as keyword arguments.</p><div class=\"rt-Box py-4 gap-4 flex flex-col w-full\"><div class=\"rt-Box flex flex-col p-6 rounded-xl overflow-x-auto border border-slate-4 bg-slate-2 items-center justify-center w-full\"><div class=\"react-colorful\"><div class=\"react-colorful__saturation\" style=\"background-color:hsl(343, 100%, 50%)\"><div aria-label=\"Color\" aria-valuetext=\"Saturation 92%, Brightness 86%\" class=\"react-colorful__interactive\" role=\"slider\" tabindex=\"0\"><div class=\"react-colorful__pointer react-colorful__saturation-pointer\" style=\"top:14.000000000000002%;left:92%\"><div class=\"react-colorful__pointer-fill\" style=\"background-color:hsl(343, 85%, 46%)\"></div></div></div></div><div class=\"react-colorful__hue react-colorful__last-control\"><div aria-label=\"Hue\" aria-valuemax=\"360\" aria-valuemin=\"0\" aria-valuenow=\"343\" class=\"react-colorful__interactive\" role=\"slider\" tabindex=\"0\"><div class=\"react-colorful__pointer react-colorful__hue-pointer\" style=\"top:50%;left:95.27777777777777%\"><div class=\"react-colorful__pointer-fill\" style=\"background-color:hsl(343, 100%, 50%)\"></div></div></div></div></div></div><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#61AFEF\">color_picker</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E06C75;font-style:italic\">color</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\">\"#db114b\"</span><span style=\"color:#ABB2BF\">)</span></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></div><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"/docs/wrapping-react/guide/#default-value\">",
    "<h3 class=\"rt-Heading rt-r-size-6 font-large scroll-m-[5rem] mt-4\" id=\"default-value\">Default Value</h3><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">You can set a default value for the prop by assigning it in the class definition.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> ColorPicker</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">Component</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    library </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"react-colorful\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    tag </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"HexColorPicker\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">    # Set a default value for the color prop</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    color: rx.Var[</span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">] </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"#db114b\"</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"/docs/wrapping-react/guide/#serializers\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"serializers\">Serializers</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Vars can be any type that can be serialized to JSON. This includes primitive types like strings, numbers, and booleans, as well as more complex types like lists, dictionaries, and dataframes.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">In case you need to serialize a more complex type, you can use the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">serializer</code> decorator to convert the type to a primitive type that can be stored in the state. Just define a method that takes the complex type as an argument and returns a primitive type. We use type annotations to determine the type that you want to serialize.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">For example, the Plotly component serializes a plotly figure into a JSON string that can be stored in the state.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> json</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> reflex </span><span style=\"color:#C678DD\">as</span><span style=\"color:#ABB2BF\"> rx</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">from</span><span style=\"color:#ABB2BF\"> plotly.graph_objects </span><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> Figure</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">from</span><span style=\"color:#ABB2BF\"> plotly.io </span><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> to_json</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\"># Use the serializer decorator to convert the figure to a JSON string.</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\"># Specify the type of the argument as an annotation.</span></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">@rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">serializer</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">def</span><span style=\"color:#61AFEF\"> serialize_figure</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#D19A66;font-style:italic\">figure</span><span style=\"color:#ABB2BF\">: Figure) -&gt; </span><span style=\"color:#56B6C2\">list</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">    # Use Plotly's to_json method to convert the figure to a JSON string.</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    return</span><span style=\"color:#ABB2BF\"> json.</span><span style=\"color:#61AFEF\">loads</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#61AFEF\">to_json</span><span style=\"color:#ABB2BF\">(figure)))[</span><span style=\"color:#98C379\">\"data\"</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">We can then define a var of this type as a prop in our component.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> reflex </span><span style=\"color:#C678DD\">as</span><span style=\"color:#ABB2BF\"> rx</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">from</span><span style=\"color:#ABB2BF\"> plotly.graph_objects </span><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> Figure</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> Plotly</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">Component</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">    \"\"\"Display a plotly graph.\"\"\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    library </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"react-plotly.js@2.6.0\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    lib_dependencies: List[</span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">] </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> [</span><span style=\"color:#98C379\">\"plotly.js@2.22.0\"</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    tag </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"Plot\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    is_default </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#D19A66\"> True</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">    # Since a serialize is defined now, we can use the Figure type directly.</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    data: rx.Var[Figure]</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"/docs/wrapping-react/guide/#event-handlers\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"event-handlers\">Event Handlers</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Recall that <a class=\"rt-Text rt-reset rt-Link rt-underline-always css-1io25ou\" data-accent-color=\"\" href=\"/docs/events/events-overview/\">event handlers</a> are ways that components can handle user interactions. In the case of the color picker, we have a single event trigger <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">on_change</code> that triggers when the color changes. The event trigger takes a single argument <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">color</code> which is the new color.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> ColorPicker</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">Component</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    library </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"react-colorful\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    tag </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"HexColorPicker\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    color: rx.Var[</span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    on_change: rx.EventHandler[</span><span style=\"color:#C678DD\">lambda</span><span style=\"color:#D19A66;font-style:italic\"> color</span><span style=\"color:#ABB2BF\">: [color]]</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">We can then bind this event trigger to an event handler in our state that takes the color as an argument.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> ColorPickerState</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">State</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    color: </span><span style=\"color:#56B6C2\">str</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#98C379\"> \"#db114b\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#61AFEF\"> set_color</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#D19A66;font-style:italic\">color</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">        self</span><span style=\"color:#ABB2BF\">.color </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> color</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">def</span><span style=\"color:#61AFEF\"> index</span><span style=\"color:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    return</span><span style=\"color:#61AFEF\"> color_picker</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">        color</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">ColorPickerState.color,</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">        # Set the event handler.</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">        on_change</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">ColorPickerState.set_color,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    )</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"/docs/wrapping-react/guide/#assets\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"assets\">Assets</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\"><em>Experimental feature added in v0.5.3</em>.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">If a wrapped component depends on assets such as images, scripts, or\nstylesheets, these can kept adjacent to the component code and\nincluded in the final build using the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">rx._x.asset</code> function.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\"><code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">rx._x.asset</code> returns a relative path that references the asset in the compiled\noutput. The target files are copied into a subdirectory of <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">assets/external</code>\nbased on the module where they are initially used. This allows third-party\ncomponents to have external assets with the same name without conflicting\nwith each other.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">For example, if there is an SVG file named <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">wave.svg</code> in the same directory as\nthis component, it can be rendered using <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">rx.image</code> and <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">rx._x.asset</code>.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> Hello</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">Component</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">    @</span><span style=\"color:#56B6C2\">classmethod</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#61AFEF\"> create</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">cls</span><span style=\"color:#ABB2BF\">, *</span><span style=\"color:#D19A66;font-style:italic\">children</span><span style=\"color:#ABB2BF\">, **</span><span style=\"color:#D19A66;font-style:italic\">props</span><span style=\"color:#ABB2BF\">) -&gt; rx.Component:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        props.</span><span style=\"color:#61AFEF\">setdefault</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#98C379\">\"align\"</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#98C379\">\"center\"</span><span style=\"color:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        return</span><span style=\"color:#ABB2BF\"> rx.</span><span style=\"color:#61AFEF\">hstack</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            rx.</span><span style=\"color:#61AFEF\">image</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">                src</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">rx._x.</span><span style=\"color:#61AFEF\">asset</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#98C379\">\"wave.svg\"</span><span style=\"color:#ABB2BF\">),</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">                width</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\">\"50px\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">                height</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\">\"50px\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            ),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            rx.</span><span style=\"color:#61AFEF\">heading</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#98C379\">\"Hello \"</span><span style=\"color:#ABB2BF\">, *children),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            **props</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        )</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"/docs/wrapping-react/guide/#debugging\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"debugging\">Debugging</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">If you encounter an error while wrapping a component it is recommended to check the Console in the browser developer tools. You can access this by going to inspect element and then clicking on the Console tab on Mac. This is because the Console is where most Javascript errors are logged.</p></article>"
  ]
}
{
  "url": "https://reflex.dev/docs/events/chaining-events/\n",
  "sections": [
    "<h1 class=\"rt-Heading rt-r-size-6 font-x-large lg:font-xx-large scroll-m-[5rem] mt-4\" id=\"chaining-events\">Chaining events</h1><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/events/chaining-events/#calling-event-handlers-from-event-handlers\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"calling-event-handlers-from-event-handlers\">Calling Event Handlers From Event Handlers</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">You can call other event handlers from event handlers to keep your code modular. Just use the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">self.call_handler</code> syntax to run another event handler. As always, you can yield within your function to send incremental updates to the frontend.</p><div class=\"rt-Box py-4 gap-4 flex flex-col w-full\" id=\"call-handler\"><div class=\"rt-Box flex flex-col p-6 rounded-xl overflow-x-auto border border-slate-4 bg-slate-2 items-center justify-center w-full\" id=\"call-handler\"><div class=\"rt-Flex rt-r-fd-column rt-r-ai-start rt-r-gap-3 rx-Stack css-zcxndt\"><span class=\"rt-reset rt-Badge rt-r-size-1 rt-variant-soft css-3fuzg5\" data-accent-color=\"green\">0</span><div aria-valuemax=\"10\" aria-valuemin=\"0\" aria-valuenow=\"0\" aria-valuetext=\"0%\" class=\"rt-ProgressRoot rt-r-size-2 rt-variant-surface css-8atqhb\" data-max=\"10\" data-state=\"loading\" data-value=\"0\" role=\"progressbar\" style=\"--progress-value:0;--progress-max:10\"><div class=\"rt-ProgressIndicator\" data-max=\"10\" data-state=\"loading\" data-value=\"0\"></div></div><button class=\"rt-reset rt-BaseButton rt-r-size-2 rt-variant-solid rt-Button\" data-accent-color=\"\">Run</button></div></div><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> asyncio</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> CallHandlerState</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">State</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    count: </span><span style=\"color:#56B6C2\">int</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#D19A66\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    progress: </span><span style=\"color:#56B6C2\">int</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#D19A66\"> 0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">    @rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">event</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    async</span><span style=\"color:#C678DD\"> def</span><span style=\"color:#61AFEF\"> run</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">        # Reset the count.</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">        self</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">set_progress</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#D19A66\">0</span><span style=\"color:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        yield</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">        # Count to 10 while showing progress.</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        for</span><span style=\"color:#ABB2BF\"> i </span><span style=\"color:#C678DD\">in</span><span style=\"color:#56B6C2\"> range</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#D19A66\">10</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">            # Wait and increment.</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            await</span><span style=\"color:#ABB2BF\"> asyncio.</span><span style=\"color:#61AFEF\">sleep</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#D19A66\">0.5</span><span style=\"color:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">            self</span><span style=\"color:#ABB2BF\">.count </span><span style=\"color:#56B6C2\">+=</span><span style=\"color:#D19A66\"> 1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">            # Update the progress.</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">            self</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">set_progress</span><span style=\"color:#ABB2BF\">(i </span><span style=\"color:#56B6C2\">+</span><span style=\"color:#D19A66\"> 1</span><span style=\"color:#ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">            # Yield to send the update.</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            yield</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">def</span><span style=\"color:#61AFEF\"> call_handler_example</span><span style=\"color:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    return</span><span style=\"color:#ABB2BF\"> rx.</span><span style=\"color:#61AFEF\">vstack</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        rx.</span><span style=\"color:#61AFEF\">badge</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            CallHandlerState.count,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            font_size</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\">\"1.5em\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            color_scheme</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\">\"green\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        rx.</span><span style=\"color:#61AFEF\">progress</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            value</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">CallHandlerState.progress,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            max</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#D19A66\">10</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            width</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\">\"100%\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        rx.</span><span style=\"color:#61AFEF\">button</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#98C379\">\"Run\"</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#E06C75;font-style:italic\">on_click</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">CallHandlerState.run),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    )</span></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></div><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/events/chaining-events/#returning-events-from-event-handlers\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"returning-events-from-event-handlers\">Returning Events From Event Handlers</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">So far, we have only seen events that are triggered by components. However, an event handler can also return events.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">In Reflex, event handlers run synchronously, so only one event handler can run at a time, and the events in the queue will be blocked until the current event handler finishes.The difference between returning an event and calling an event handler is that returning an event will send the event to the frontend and unblock the queue.</p><div class=\"rt-Flex rt-r-fd-column rt-r-ai-start rt-r-gap-3 rx-Stack css-tjvfc7\"><div class=\"rt-Flex rt-r-fd-row rt-r-ai-start rt-r-gap-1 rx-Stack css-99pxke\"><div class=\"rt-Box css-1ha2jce\"><svg class=\"lucide lucide-info css-1yx2zam\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><circle cx=\"12\" cy=\"12\" r=\"10\"></circle><path d=\"M12 16v-4\"></path><path d=\"M12 8h.01\"></path></svg></div><div class=\"css-1w54oj2\"><p class=\"rt-Text css-56tzch\">Be sure to use the class name <code class=\"rt-reset rt-Code rt-variant-soft\" data-accent-color=\"\">State</code> (or any substate) rather than <code class=\"rt-reset rt-Code rt-variant-soft\" data-accent-color=\"\">self</code> when returning events.</p></div></div></div><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Try entering an integer in the input below then clicking out.</p><div class=\"rt-Box py-4 gap-4 flex flex-col w-full\" id=\"collatz\"><div class=\"rt-Box flex flex-col p-6 rounded-xl overflow-x-auto border border-slate-4 bg-slate-2 items-center justify-center w-full\" id=\"collatz\"><div class=\"rt-Flex rt-r-fd-column rt-r-ai-start rt-r-gap-3 rx-Stack css-zcxndt\"><span class=\"rt-reset rt-Badge rt-r-size-1 rt-variant-soft css-3fuzg5\" data-accent-color=\"green\">1</span><div class=\"rt-TextFieldRoot rt-r-size-2 rt-variant-surface\"><input class=\"rt-reset rt-TextFieldInput\" spellcheck=\"false\"/></div></div></div><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> CollatzState</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">State</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    count: </span><span style=\"color:#56B6C2\">int</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#D19A66\"> 1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">    @rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">event</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#61AFEF\"> start_collatz</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#D19A66;font-style:italic\">count</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">        \"\"\"Run the collatz conjecture on the given number.\"\"\"</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">        self</span><span style=\"color:#ABB2BF\">.count </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#56B6C2\"> abs</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#56B6C2\">int</span><span style=\"color:#ABB2BF\">(count </span><span style=\"color:#C678DD\">if</span><span style=\"color:#ABB2BF\"> count </span><span style=\"color:#C678DD\">else</span><span style=\"color:#D19A66\"> 1</span><span style=\"color:#ABB2BF\">))</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        return</span><span style=\"color:#ABB2BF\"> CollatzState.run_step</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">    @rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">event</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    async</span><span style=\"color:#C678DD\"> def</span><span style=\"color:#61AFEF\"> run_step</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">        \"\"\"Run a single step of the collatz conjecture.\"\"\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        while</span><span style=\"color:#E5C07B\"> self</span><span style=\"color:#ABB2BF\">.count </span><span style=\"color:#56B6C2\">&gt;</span><span style=\"color:#D19A66\"> 1</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            await</span><span style=\"color:#ABB2BF\"> asyncio.</span><span style=\"color:#61AFEF\">sleep</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#D19A66\">0.5</span><span style=\"color:#ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            if</span><span style=\"color:#E5C07B\"> self</span><span style=\"color:#ABB2BF\">.count </span><span style=\"color:#56B6C2\">%</span><span style=\"color:#D19A66\"> 2</span><span style=\"color:#56B6C2\"> ==</span><span style=\"color:#D19A66\"> 0</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">                # If the number is even, divide by 2.</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">                self</span><span style=\"color:#ABB2BF\">.count </span><span style=\"color:#56B6C2\">/=</span><span style=\"color:#D19A66\"> 2</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            else</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">                # If the number is odd, multiply by 3 and add 1.</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">                self</span><span style=\"color:#ABB2BF\">.count </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#E5C07B\"> self</span><span style=\"color:#ABB2BF\">.count </span><span style=\"color:#56B6C2\">*</span><span style=\"color:#D19A66\"> 3</span><span style=\"color:#56B6C2\"> +</span><span style=\"color:#D19A66\"> 1</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            yield</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">def</span><span style=\"color:#61AFEF\"> collatz_example</span><span style=\"color:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    return</span><span style=\"color:#ABB2BF\"> rx.</span><span style=\"color:#61AFEF\">vstack</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        rx.</span><span style=\"color:#61AFEF\">badge</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            CollatzState.count,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            font_size</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\">\"1.5em\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            color_scheme</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\">\"green\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        rx.</span><span style=\"color:#61AFEF\">input</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E06C75;font-style:italic\">on_blur</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">CollatzState.start_collatz),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    )</span></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></div><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">In this example, we run the <a class=\"rt-Text rt-reset rt-Link rt-underline-always css-1io25ou\" data-accent-color=\"\" href=\"https://en.wikipedia.org/wiki/Collatz_conjecture\">Collatz Conjecture</a> on a number entered by the user.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">When the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">on_blur</code> event is triggered, the event handler <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">start_collatz</code> is called. It sets the initial count, then calls <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">run_step</code> which runs until the count reaches <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">1</code>.</p></article>"
  ]
}
{
  "url": "https://reflex.dev/docs/vars/computed-vars/\n",
  "sections": [
    "<h1 class=\"rt-Heading rt-r-size-6 font-x-large lg:font-xx-large scroll-m-[5rem] mt-4\" id=\"computed-vars\">Computed Vars</h1><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Computed vars have values derived from other properties on the backend. They are\ndefined as methods in your State class with the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">@rx.var</code> decorator. A computed\nvar is recomputed every time an event is processed in your app.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Try typing in the input box and clicking out.</p><div class=\"rt-Box py-4 gap-4 flex flex-col w-full\" id=\"upper\"><div class=\"rt-Box flex flex-col p-6 rounded-xl overflow-x-auto border border-slate-4 bg-slate-2 items-center justify-center w-full\" id=\"upper\"><div class=\"rt-Flex rt-r-fd-column rt-r-ai-start rt-r-gap-3 rx-Stack css-zcxndt\">",
    "<h1 class=\"rt-Heading rt-r-size-6 css-134ffhx\">HELLO</h1><div class=\"rt-TextFieldRoot rt-r-size-2 rt-variant-surface\"><input class=\"rt-reset rt-TextFieldInput\" placeholder=\"Type here...\" spellcheck=\"false\"/></div></div></div><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> UppercaseState</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">State</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    text: </span><span style=\"color:#56B6C2\">str</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#98C379\"> \"hello\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">    @rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">var</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#61AFEF\"> upper_text</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">) -&gt; </span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">        # This will be recomputed whenever `text` changes.</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        return</span><span style=\"color:#E5C07B\"> self</span><span style=\"color:#ABB2BF\">.text.</span><span style=\"color:#61AFEF\">upper</span><span style=\"color:#ABB2BF\">()</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">def</span><span style=\"color:#61AFEF\"> uppercase_example</span><span style=\"color:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    return</span><span style=\"color:#ABB2BF\"> rx.</span><span style=\"color:#61AFEF\">vstack</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        rx.</span><span style=\"color:#61AFEF\">heading</span><span style=\"color:#ABB2BF\">(UppercaseState.upper_text),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        rx.</span><span style=\"color:#61AFEF\">input</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            on_blur</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">UppercaseState.set_text,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            placeholder</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\">\"Type here...\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    )</span></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></div><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Here, <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">upper_text</code> is a computed var that always holds the upper case version of <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">text</code>.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">We recommend always using type annotations for computed vars.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"/docs/vars/computed-vars/#cached-vars\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"cached-vars\">Cached Vars</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">A cached var, decorated as <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">@rx.var(cache=True)</code> is a special type of computed var\nthat is only recomputed when the other state vars it depends on change. This is\nuseful for expensive computations, but in some cases it may not update when you\nexpect it to.\nPrevious versions of Reflex had a <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">@rx.cached_var</code> decorator, which is now replaced\nby the new <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">cache</code> argument of <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">@rx.var</code>.</p><div class=\"rt-Box py-4 gap-4 flex flex-col w-full\"><div class=\"rt-Box flex flex-col p-6 rounded-xl overflow-x-auto border border-slate-4 bg-slate-2 items-center justify-center w-full\"><div class=\"rt-Flex rt-r-fd-column rt-r-ai-start rt-r-gap-3 rx-Stack css-zcxndt\"><p class=\"rt-Text\">State touched at: 00:50:21</p><p class=\"rt-Text\">Counter A: 0 at 00:50:21</p><p class=\"rt-Text\">Counter B: 0 at 00:50:21</p><div class=\"rt-Flex rt-r-fd-row rt-r-ai-start rt-r-gap-3 rx-Stack css-zcxndt\"><button class=\"rt-reset rt-BaseButton rt-r-size-2 rt-variant-solid rt-Button\" data-accent-color=\"\">Increment A</button><button class=\"rt-reset rt-BaseButton rt-r-size-2 rt-variant-solid rt-Button\" data-accent-color=\"\">Increment B</button></div></div></div><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> CachedVarState</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">State</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    counter_a: </span><span style=\"color:#56B6C2\">int</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#D19A66\"> 0</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    counter_b: </span><span style=\"color:#56B6C2\">int</span><span style=\"color:#56B6C2\"> =</span><span style=\"color:#D19A66\"> 0</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">    @rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">var</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#61AFEF\"> last_touch_time</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">) -&gt; </span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">        # This is updated anytime the state is updated.</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        return</span><span style=\"color:#ABB2BF\"> time.</span><span style=\"color:#61AFEF\">strftime</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#98C379\">\"%H:%M:%S\"</span><span style=\"color:#ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">    @rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">event</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#61AFEF\"> increment_a</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">        self</span><span style=\"color:#ABB2BF\">.counter_a </span><span style=\"color:#56B6C2\">+=</span><span style=\"color:#D19A66\"> 1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">    @rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">var</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E06C75;font-style:italic\">cache</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#D19A66\">True</span><span style=\"color:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#61AFEF\"> last_counter_a_update</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">) -&gt; </span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">        # This is updated only when `counter_a` changes.</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        return</span><span style=\"color:#C678DD\"> f</span><span style=\"color:#98C379\">\"</span><span style=\"color:#D19A66\">{</span><span style=\"color:#E5C07B\">self</span><span style=\"color:#ABB2BF\">.counter_a</span><span style=\"color:#D19A66\">}</span><span style=\"color:#98C379\"> at </span><span style=\"color:#D19A66\">{</span><span style=\"color:#ABB2BF\">time.</span><span style=\"color:#61AFEF\">strftime</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#98C379\">'%H:%M:%S'</span><span style=\"color:#ABB2BF\">)</span><span style=\"color:#D19A66\">}</span><span style=\"color:#98C379\">\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">    @rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">event</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#61AFEF\"> increment_b</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">        self</span><span style=\"color:#ABB2BF\">.counter_b </span><span style=\"color:#56B6C2\">+=</span><span style=\"color:#D19A66\"> 1</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">    @rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">var</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E06C75;font-style:italic\">cache</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#D19A66\">True</span><span style=\"color:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#61AFEF\"> last_counter_b_update</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">) -&gt; </span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">        # This is updated only when `counter_b` changes.</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        return</span><span style=\"color:#C678DD\"> f</span><span style=\"color:#98C379\">\"</span><span style=\"color:#D19A66\">{</span><span style=\"color:#E5C07B\">self</span><span style=\"color:#ABB2BF\">.counter_b</span><span style=\"color:#D19A66\">}</span><span style=\"color:#98C379\"> at </span><span style=\"color:#D19A66\">{</span><span style=\"color:#ABB2BF\">time.</span><span style=\"color:#61AFEF\">strftime</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#98C379\">'%H:%M:%S'</span><span style=\"color:#ABB2BF\">)</span><span style=\"color:#D19A66\">}</span><span style=\"color:#98C379\">\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">def</span><span style=\"color:#61AFEF\"> cached_var_example</span><span style=\"color:#ABB2BF\">():</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    return</span><span style=\"color:#ABB2BF\"> rx.</span><span style=\"color:#61AFEF\">vstack</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        rx.</span><span style=\"color:#61AFEF\">text</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            f</span><span style=\"color:#98C379\">\"State touched at: </span><span style=\"color:#D19A66\">{</span><span style=\"color:#ABB2BF\">CachedVarState.last_touch_time</span><span style=\"color:#D19A66\">}</span><span style=\"color:#98C379\">\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        rx.</span><span style=\"color:#61AFEF\">text</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            f</span><span style=\"color:#98C379\">\"Counter A: </span><span style=\"color:#D19A66\">{</span><span style=\"color:#ABB2BF\">CachedVarState.last_counter_a_update</span><span style=\"color:#D19A66\">}</span><span style=\"color:#98C379\">\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        rx.</span><span style=\"color:#61AFEF\">text</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            f</span><span style=\"color:#98C379\">\"Counter B: </span><span style=\"color:#D19A66\">{</span><span style=\"color:#ABB2BF\">CachedVarState.last_counter_b_update</span><span style=\"color:#D19A66\">}</span><span style=\"color:#98C379\">\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        rx.</span><span style=\"color:#61AFEF\">hstack</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            rx.</span><span style=\"color:#61AFEF\">button</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">                \"Increment A\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">                on_click</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">CachedVarState.increment_a,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            ),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            rx.</span><span style=\"color:#61AFEF\">button</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">                \"Increment B\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">                on_click</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">CachedVarState.increment_b,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            ),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    )</span></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></div><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">In this example <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">last_touch_time</code> is a normal computed var, which updates any\ntime the state is modified. <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">last_counter_a_update</code> is a computed var that only\ndepends on <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">counter_a</code>, so it only gets recomputed when <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">counter_a</code> has changes.\nSimilarly <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">last_counter_b_update</code> only depends on <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">counter_b</code>, and thus is\nupdated only when <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">counter_b</code> changes.</p></article>"
  ]
}
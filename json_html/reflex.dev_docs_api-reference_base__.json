{
  "url": "https://reflex.dev/docs/api-reference/base/\n",
  "sections": [
    "<h1 class=\"rt-Heading rt-r-size-6 font-x-large lg:font-xx-large scroll-m-[5rem] mt-4\" id=\"base\">Base</h1><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><code class=\"rt-reset rt-Code rt-variant-soft code-style text-[18px]\" data-accent-color=\"\">reflex.base.Base</code><span class=\"rt-Separator rt-r-orientation-horizontal rt-r-size-4 css-1ezhfzu\" data-accent-color=\"gray\"></span><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">The base class subclassed by all Reflex classes.</p>\n<p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">This class wraps Pydantic and provides common methods such as\nserialization and setting fields.</p>\n<p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Any data structure that needs to be transferred between the\nfrontend and backend should subclass this class.</p><div class=\"rt-Box\"><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"https://reflex.dev/docs/api-reference/base/#methods\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"methods\">Methods</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><div class=\"rt-ScrollAreaRoot css-14wo2pr\" dir=\"ltr\" style=\"position:relative;--radix-scroll-area-corner-width:0px;--radix-scroll-area-corner-height:0px\"><style>[data-radix-scroll-area-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-scroll-area-viewport]::-webkit-scrollbar{display:none}</style><div class=\"rt-ScrollAreaViewport\" data-radix-scroll-area-viewport=\"\" style=\"overflow: scroll;\"><div style=\"min-width:100%;display:table\"><div class=\"rt-TableRoot rt-r-size-2 rt-variant-ghost\"><div class=\"rt-ScrollAreaRoot\" dir=\"ltr\" style=\"position:relative;--radix-scroll-area-corner-width:0px;--radix-scroll-area-corner-height:0px\"><style>[data-radix-scroll-area-viewport]{scrollbar-width:none;-ms-overflow-style:none;-webkit-overflow-scrolling:touch;}[data-radix-scroll-area-viewport]::-webkit-scrollbar{display:none}</style><div class=\"rt-ScrollAreaViewport\" data-radix-scroll-area-viewport=\"\" style=\"overflow: scroll;\"><div style=\"min-width:100%;display:table\"><table class=\"rt-TableRootTable\"><thead class=\"rt-TableHeader\"><tr class=\"rt-TableRow\"><th class=\"rt-TableCell rt-TableColumnHeaderCell\" scope=\"col\">Signature</th><th class=\"rt-TableCell rt-TableColumnHeaderCell\" scope=\"col\">Description</th></tr></thead><tbody class=\"rt-TableBody\"><tr class=\"rt-TableRow\"><td class=\"rt-TableCell css-xs9fqv\"><code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">json(self) -&gt; 'str'</code></td><td class=\"rt-TableCell font-small text-slate-11 text-nowrap css-xs9fqv\">Convert the object to a json string.</td></tr><tr class=\"rt-TableRow\"><td class=\"rt-TableCell css-xs9fqv\"><code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">set(self, **kwargs: 'Any')</code></td><td class=\"rt-TableCell font-small text-slate-11 text-nowrap css-xs9fqv\">Set multiple fields and return the object.</td></tr><tr class=\"rt-TableRow\"><td class=\"rt-TableCell css-xs9fqv\"><code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">get_fields(cls) -&gt; 'dict[str, ModelField]'</code></td><td class=\"rt-TableCell font-small text-slate-11 text-nowrap css-xs9fqv\">Get the fields of the object.</td></tr><tr class=\"rt-TableRow\"><td class=\"rt-TableCell css-xs9fqv\"><code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">add_field(cls, var: 'Var', default_value: 'Any')</code></td><td class=\"rt-TableCell font-small text-slate-11 text-nowrap css-xs9fqv\">Add a pydantic field after class definition.\n\n        Used by State.add_var() to correctly handle the new variable.</td></tr><tr class=\"rt-TableRow\"><td class=\"rt-TableCell css-xs9fqv\"><code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">get_value(self, key: 'str') -&gt; 'Any'</code></td><td class=\"rt-TableCell font-small text-slate-11 text-nowrap css-xs9fqv\">Get the value of a field.</td></tr></tbody></table></div></div><div class=\"rt-ScrollAreaViewportFocusRing\"></div></div></div></div></div><div class=\"rt-ScrollAreaViewportFocusRing\"></div></div></div></div></article>"
  ]
}
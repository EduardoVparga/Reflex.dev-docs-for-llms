{
  "url": "https://reflex.dev/docs/wrapping-react/example/\n",
  "sections": [
    "<h1 class=\"rt-Heading rt-r-size-6 font-x-large lg:font-xx-large scroll-m-[5rem] mt-4\" id=\"complex-example\">Complex Example</h1><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-4 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">In this more complex example we will be wrapping <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">reactflow</code> a library for building node based applications like flow charts, diagrams, graphs, etc.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"/docs/wrapping-react/example/#import\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"import\">Import</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Lets start by importing the library <a class=\"rt-Text rt-reset rt-Link rt-underline-always css-1io25ou\" data-accent-color=\"\" href=\"https://www.npmjs.com/package/reactflow\">reactflow</a>. Lets make a separate file called <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">reactflow.py</code> and add the following code:</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> refex </span><span style=\"color:#C678DD\">as</span><span style=\"color:#ABB2BF\"> rx</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">from</span><span style=\"color:#ABB2BF\"> typing </span><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> Any, Dict, List, Union</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> ReactFlowLib</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">Component</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">    \"\"\"A component that wraps a react flow lib.\"\"\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    library </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"reactflow\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#61AFEF\"> _get_custom_code</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">) -&gt; </span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">:</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        return</span><span style=\"color:#98C379\"> \"\"\"import 'reactflow/dist/style.css';</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">        \"\"\"</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Notice we also use the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">_get_custom_code</code> method to import the css file that is needed for the styling of the library.</p><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"/docs/wrapping-react/example/#components\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"components\">Components</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">For this tutorial we will wrap three components from Reactflow: <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">ReactFlow</code>, <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">Background</code>, and <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">Controls</code>. Lets start with the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">ReactFlow</code> component.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Here we will define the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">tag</code> and the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">vars</code> that we will need to use the component.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">For this tutorial we will define <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">EventHandler</code> props <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">on_nodes_change</code> and <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">on_connect</code>, but you can find all the events that the component triggers in the <a class=\"rt-Text rt-reset rt-Link rt-underline-always css-1io25ou\" data-accent-color=\"\" href=\"https://reactflow.dev/docs/api/react-flow-props/#onnodeschange\">reactflow docs</a>.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> reflex </span><span style=\"color:#C678DD\">as</span><span style=\"color:#ABB2BF\"> rx</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">from</span><span style=\"color:#ABB2BF\"> typing </span><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> Any, Dict, List, Union</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> ReactFlowLib</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">Component</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#D19A66\">    ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> ReactFlow</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">ReactFlowLib</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    tag </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"ReactFlow\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    nodes: rx.Var[List[Dict[</span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">, Any]]]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    edges: rx.Var[List[Dict[</span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">, Any]]]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    fit_view: rx.Var[</span><span style=\"color:#56B6C2\">bool</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    nodes_draggable: rx.Var[</span><span style=\"color:#56B6C2\">bool</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    nodes_connectable: rx.Var[</span><span style=\"color:#56B6C2\">bool</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    nodes_focusable: rx.Var[</span><span style=\"color:#56B6C2\">bool</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    on_nodes_change: rx.EventHandler[</span><span style=\"color:#C678DD\">lambda</span><span style=\"color:#D19A66;font-style:italic\"> e0</span><span style=\"color:#ABB2BF\">: [e0]]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    on_connect: rx.EventHandler[</span><span style=\"color:#C678DD\">lambda</span><span style=\"color:#D19A66;font-style:italic\"> e0</span><span style=\"color:#ABB2BF\">: [e0]]</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Now lets add the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">Background</code> and <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">Controls</code> components. We will also create the components using the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">create</code> method so that we can use them in our app.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> reflex </span><span style=\"color:#C678DD\">as</span><span style=\"color:#ABB2BF\"> rx</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">from</span><span style=\"color:#ABB2BF\"> typing </span><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> Any, Dict, List, Union</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> ReactFlowLib</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">Component</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#D19A66\">    ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> ReactFlow</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">ReactFlowLib</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#D19A66\">    ...</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> Background</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">ReactFlowLib</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    tag </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"Background\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    color: rx.Var[</span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    gap: rx.Var[</span><span style=\"color:#56B6C2\">int</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    size: rx.Var[</span><span style=\"color:#56B6C2\">int</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    variant: rx.Var[</span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> Controls</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">ReactFlowLib</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    tag </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\"> \"Controls\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">react_flow </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> ReactFlow.create</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">background </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> Background.create</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">controls </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> Controls.create</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><a class=\"rt-Text rt-reset rt-Link rt-underline-none flex flex-row items-center gap-6 hover:!text-violet-11 text-slate-12 cursor-pointer mb-2 transition-colors group css-1macts\" data-accent-color=\"\" href=\"/docs/wrapping-react/example/#building-the-app\">",
    "<h2 class=\"rt-Heading rt-r-size-6 font-large lg:font-x-large scroll-m-[5rem] mt-8\" id=\"building-the-app\">Building the App</h2><svg class=\"lucide lucide-link !text-violet-11 invisible transition-[visibility_0.075s_ease-out] group-hover:visible mt-8 css-svt5ra\" fill=\"none\" height=\"18\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"18\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"></path><path d=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"></path></svg></a><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Now that we have our components lets build the app.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Lets start by defining the initial nodes and edges that we will use in our app.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> reflex </span><span style=\"color:#C678DD\">as</span><span style=\"color:#ABB2BF\"> rx</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">from</span><span style=\"color:#ABB2BF\"> .react_flow </span><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> react_flow, background, controls</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> random</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">from</span><span style=\"color:#ABB2BF\"> collections </span><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> defaultdict</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">from</span><span style=\"color:#ABB2BF\"> typing </span><span style=\"color:#C678DD\">import</span><span style=\"color:#ABB2BF\"> Any, Dict, List</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">initial_nodes </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> [</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    \\</span><span style=\"color:#FFFFFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">        'id'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">'1'</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">        'type'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">'input'</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">        'data'</span><span style=\"color:#ABB2BF\">: {</span><span style=\"color:#98C379\">'label'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">'150'</span><span style=\"color:#ABB2BF\">},</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">        'position'</span><span style=\"color:#ABB2BF\">: {</span><span style=\"color:#98C379\">'x'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#D19A66\">250</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#98C379\">'y'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#D19A66\">25</span><span style=\"color:#ABB2BF\">},</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    \\</span><span style=\"color:#FFFFFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">        'id'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">'2'</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">        'data'</span><span style=\"color:#ABB2BF\">: {</span><span style=\"color:#98C379\">'label'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">'25'</span><span style=\"color:#ABB2BF\">},</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">        'position'</span><span style=\"color:#ABB2BF\">: {</span><span style=\"color:#98C379\">'x'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#D19A66\">100</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#98C379\">'y'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#D19A66\">125</span><span style=\"color:#ABB2BF\">},</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    \\</span><span style=\"color:#FFFFFF\">{</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">        'id'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">'3'</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">        'type'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">'output'</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">        'data'</span><span style=\"color:#ABB2BF\">: {</span><span style=\"color:#98C379\">'label'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">'5'</span><span style=\"color:#ABB2BF\">},</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">        'position'</span><span style=\"color:#ABB2BF\">: {</span><span style=\"color:#98C379\">'x'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#D19A66\">250</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#98C379\">'y'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#D19A66\">250</span><span style=\"color:#ABB2BF\">},</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    },</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">initial_edges </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> [</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    {</span><span style=\"color:#98C379\">'id'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">'e1-2'</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#98C379\">'source'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">'1'</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#98C379\">'target'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">'2'</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#98C379\">'label'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">'*'</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#98C379\">'animated'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#D19A66\">True</span><span style=\"color:#ABB2BF\">},</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    {</span><span style=\"color:#98C379\">'id'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">'e2-3'</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#98C379\">'source'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">'2'</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#98C379\">'target'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">'3'</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#98C379\">'label'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#98C379\">'+'</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#98C379\">'animated'</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#D19A66\">True</span><span style=\"color:#ABB2BF\">},</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Next we will define the state of our app. We have four event handlers: <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">add_random_node</code>, <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">clear_graph</code>, <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">on_connect</code> and <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">on_nodes_change</code>.</p><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">The <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">on_nodes_change</code> event handler is triggered when a node is selected and dragged. This function is used to update the position of a node during dragging. It takes a single argument <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">node_changes</code>, which is a list of dictionaries containing various types of metadata. For updating positions, the function specifically processes changes of type <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">position</code>.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">class</span><span style=\"color:#E5C07B\"> State</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#E5C07B\">State</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">    \"\"\"The app state.\"\"\"</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    nodes: List[Dict[</span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">, Any]] </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> initial_nodes</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    edges: List[Dict[</span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">, Any]] </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> initial_edges</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">    @rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">event</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#61AFEF\"> add_random_node</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        new_node_id </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#C678DD\"> f</span><span style=\"color:#98C379\">'</span><span style=\"color:#D19A66\">{</span><span style=\"color:#56B6C2\">len</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">self</span><span style=\"color:#ABB2BF\">.nodes) </span><span style=\"color:#56B6C2\">+</span><span style=\"color:#D19A66\"> 1</span><span style=\"color:#ABB2BF\">\\</span><span style=\"color:#FFFFFF\">}'</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        node_type = random.</span><span style=\"color:#61AFEF\">choice</span><span style=\"color:#ABB2BF\">([</span><span style=\"color:#98C379\">\"default\"</span><span style=\"color:#ABB2BF\">])</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">        # Label is random number</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        label </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> new_node_id</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        x </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> random.</span><span style=\"color:#61AFEF\">randint</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#D19A66\">0</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#D19A66\">500</span><span style=\"color:#ABB2BF\">)</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        y </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> random.</span><span style=\"color:#61AFEF\">randint</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#D19A66\">0</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#D19A66\">500</span><span style=\"color:#ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        new_node </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">            \"id\"</span><span style=\"color:#ABB2BF\">: new_node_id,</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">            \"type\"</span><span style=\"color:#ABB2BF\">: node_type,</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">            \"data\"</span><span style=\"color:#ABB2BF\">: {</span><span style=\"color:#98C379\">\"label\"</span><span style=\"color:#ABB2BF\">: label},</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">            \"position\"</span><span style=\"color:#ABB2BF\">: {</span><span style=\"color:#98C379\">\"x\"</span><span style=\"color:#ABB2BF\">: x, </span><span style=\"color:#98C379\">\"y\"</span><span style=\"color:#ABB2BF\">: y},</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">            \"draggable\"</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#D19A66\">True</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">        self</span><span style=\"color:#ABB2BF\">.nodes.</span><span style=\"color:#61AFEF\">append</span><span style=\"color:#ABB2BF\">(new_node)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">    @rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">event</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#61AFEF\"> clear_graph</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">        self</span><span style=\"color:#ABB2BF\">.nodes </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> []  </span><span style=\"color:#7F848E;font-style:italic\"># Clear the nodes list</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">        self</span><span style=\"color:#ABB2BF\">.edges </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> []  </span><span style=\"color:#7F848E;font-style:italic\"># Clear the edges list</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">    @rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">event</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#61AFEF\"> on_connect</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B;font-style:italic\">self</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#D19A66;font-style:italic\">new_edge</span><span style=\"color:#ABB2BF\">):</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">        # Iterate over the existing edges</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        for</span><span style=\"color:#ABB2BF\"> i, edge </span><span style=\"color:#C678DD\">in</span><span style=\"color:#56B6C2\"> enumerate</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">self</span><span style=\"color:#ABB2BF\">.edges):</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">            # If we find an edge with the same ID as the new edge</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            if</span><span style=\"color:#ABB2BF\"> (</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">                edge[</span><span style=\"color:#98C379\">\"id\"</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color:#56B6C2\">                ==</span><span style=\"color:#C678DD\"> f</span><span style=\"color:#98C379\">\"e</span><span style=\"color:#D19A66\">{</span><span style=\"color:#ABB2BF\">new_edge[</span><span style=\"color:#98C379\">'source'</span><span style=\"color:#ABB2BF\">]</span><span style=\"color:#D19A66\">}</span><span style=\"color:#98C379\">-</span><span style=\"color:#D19A66\">{</span><span style=\"color:#ABB2BF\">new_edge[</span><span style=\"color:#98C379\">'target'</span><span style=\"color:#ABB2BF\">]</span><span style=\"color:#D19A66\">}</span><span style=\"color:#98C379\">\"</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            ):</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">                # Delete the existing edge</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">                del</span><span style=\"color:#E5C07B\"> self</span><span style=\"color:#ABB2BF\">.edges[i]</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">                break</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">        # Add the new edge</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">        self</span><span style=\"color:#ABB2BF\">.edges.</span><span style=\"color:#61AFEF\">append</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            {</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">                \"id\"</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#C678DD\">f</span><span style=\"color:#98C379\">\"e</span><span style=\"color:#D19A66\">{</span><span style=\"color:#ABB2BF\">new_edge[</span><span style=\"color:#98C379\">'source'</span><span style=\"color:#ABB2BF\">]</span><span style=\"color:#D19A66\">}</span><span style=\"color:#98C379\">-</span><span style=\"color:#D19A66\">{</span><span style=\"color:#ABB2BF\">new_edge[</span><span style=\"color:#98C379\">'target'</span><span style=\"color:#ABB2BF\">]</span><span style=\"color:#D19A66\">}</span><span style=\"color:#98C379\">\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">                \"source\"</span><span style=\"color:#ABB2BF\">: new_edge[</span><span style=\"color:#98C379\">\"source\"</span><span style=\"color:#ABB2BF\">],</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">                \"target\"</span><span style=\"color:#ABB2BF\">: new_edge[</span><span style=\"color:#98C379\">\"target\"</span><span style=\"color:#ABB2BF\">],</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">                \"label\"</span><span style=\"color:#ABB2BF\">: random.</span><span style=\"color:#61AFEF\">choice</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">                    [</span><span style=\"color:#98C379\">\"+\"</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#98C379\">\"-\"</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#98C379\">\"*\"</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#98C379\">\"/\"</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">                ),</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">                \"animated\"</span><span style=\"color:#ABB2BF\">: </span><span style=\"color:#D19A66\">True</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">    @rx</span><span style=\"color:#ABB2BF\">.</span><span style=\"color:#61AFEF\">event</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    def</span><span style=\"color:#61AFEF\"> on_nodes_change</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B;font-style:italic\">        self</span><span style=\"color:#ABB2BF\">, </span><span style=\"color:#D19A66;font-style:italic\">node_changes</span><span style=\"color:#ABB2BF\">: List[Dict[</span><span style=\"color:#56B6C2\">str</span><span style=\"color:#ABB2BF\">, Any]]</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    ):</span></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">        # Receives a list of Nodes in case of events like dragging</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        map_id_to_new_position </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#61AFEF\"> defaultdict</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#56B6C2\">dict</span><span style=\"color:#ABB2BF\">)</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">        # Loop over the changes and store the new position</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        for</span><span style=\"color:#ABB2BF\"> change </span><span style=\"color:#C678DD\">in</span><span style=\"color:#ABB2BF\"> node_changes:</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            if</span><span style=\"color:#ABB2BF\"> (</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">                change[</span><span style=\"color:#98C379\">\"type\"</span><span style=\"color:#ABB2BF\">] </span><span style=\"color:#56B6C2\">==</span><span style=\"color:#98C379\"> \"position\"</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">                and</span><span style=\"color:#ABB2BF\"> change.</span><span style=\"color:#61AFEF\">get</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#98C379\">\"dragging\"</span><span style=\"color:#ABB2BF\">) </span><span style=\"color:#56B6C2\">==</span><span style=\"color:#D19A66\"> True</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            ):</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">                map_id_to_new_position[</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">                    change[</span><span style=\"color:#98C379\">\"id\"</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">                ] </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> change[</span><span style=\"color:#98C379\">\"position\"</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\">        # Loop over the nodes and update the position</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">        for</span><span style=\"color:#ABB2BF\"> i, node </span><span style=\"color:#C678DD\">in</span><span style=\"color:#56B6C2\"> enumerate</span><span style=\"color:#ABB2BF\">(</span><span style=\"color:#E5C07B\">self</span><span style=\"color:#ABB2BF\">.nodes):</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">            if</span><span style=\"color:#ABB2BF\"> node[</span><span style=\"color:#98C379\">\"id\"</span><span style=\"color:#ABB2BF\">] </span><span style=\"color:#C678DD\">in</span><span style=\"color:#ABB2BF\"> map_id_to_new_position:</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">                new_position </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> map_id_to_new_position[</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">                    node[</span><span style=\"color:#98C379\">\"id\"</span><span style=\"color:#ABB2BF\">]</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">                ]</span></span>\n<span class=\"line\"><span style=\"color:#E5C07B\">                self</span><span style=\"color:#ABB2BF\">.nodes[i][</span><span style=\"color:#98C379\">\"position\"</span><span style=\"color:#ABB2BF\">] </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> new_position</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Now lets define the UI of our app. We will use the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">react_flow</code> component and pass in the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">nodes</code> and <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">edges</code> from our state. We will also add the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">on_connect</code> event handler to the <code class=\"rt-reset rt-Code rt-variant-soft code-style\" data-accent-color=\"\">react_flow</code> component to handle when an edge is connected.</p><pre><div class=\"rt-Box relative mb-4\"><div class=\"rt-Box code-block css-1islnds\"><div><pre class=\"shiki one-dark-pro\" style=\"background-color:#282c34;color:#abb2bf\" tabindex=\"0\"><code><span class=\"line\"><span style=\"color:#C678DD\">def</span><span style=\"color:#61AFEF\"> index</span><span style=\"color:#ABB2BF\">() -&gt; rx.Component:</span></span>\n<span class=\"line\"><span style=\"color:#C678DD\">    return</span><span style=\"color:#ABB2BF\"> rx.</span><span style=\"color:#61AFEF\">vstack</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">        react_flow</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">            background</span><span style=\"color:#ABB2BF\">(),</span></span>\n<span class=\"line\"><span style=\"color:#61AFEF\">            controls</span><span style=\"color:#ABB2BF\">(),</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            nodes_draggable</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#D19A66\">True</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            nodes_connectable</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#D19A66\">True</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            on_connect</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#C678DD\">lambda</span><span style=\"color:#D19A66;font-style:italic\"> e0</span><span style=\"color:#ABB2BF\">: State.</span><span style=\"color:#61AFEF\">on_connect</span><span style=\"color:#ABB2BF\">(e0),</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            on_nodes_change</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#C678DD\">lambda</span><span style=\"color:#D19A66;font-style:italic\"> e0</span><span style=\"color:#ABB2BF\">: State.</span><span style=\"color:#61AFEF\">on_nodes_change</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">                e0</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            ),</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            nodes</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">State.nodes,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            edges</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">State.edges,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            fit_view</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#D19A66\">True</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        rx.</span><span style=\"color:#61AFEF\">hstack</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            rx.</span><span style=\"color:#61AFEF\">button</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">                \"Clear graph\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">                on_click</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">State.clear_graph,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">                width</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\">\"100%\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            ),</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            rx.</span><span style=\"color:#61AFEF\">button</span><span style=\"color:#ABB2BF\">(</span></span>\n<span class=\"line\"><span style=\"color:#98C379\">                \"Add node\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">                on_click</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\">State.add_random_node,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">                width</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\">\"100%\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">            ),</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">            width</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\">\"100%\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">        ),</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">        height</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\">\"30em\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#E06C75;font-style:italic\">        width</span><span style=\"color:#56B6C2\">=</span><span style=\"color:#98C379\">\"100%\"</span><span style=\"color:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">    )</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"color:#7F848E;font-style:italic\"># Add state and page to the app.</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">app </span><span style=\"color:#56B6C2\">=</span><span style=\"color:#ABB2BF\"> rx.</span><span style=\"color:#61AFEF\">App</span><span style=\"color:#ABB2BF\">()</span></span>\n<span class=\"line\"><span style=\"color:#ABB2BF\">app.</span><span style=\"color:#61AFEF\">add_page</span><span style=\"color:#ABB2BF\">(index)</span></span>\n<span class=\"line\"></span></code></pre></div><button class=\"css-kobh7h\"><svg class=\"lucide lucide-copy css-cqk0y8\" fill=\"none\" height=\"16\" stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" viewbox=\"0 0 24 24\" width=\"16\" xmlns=\"http://www.w3.org/2000/svg\"><rect height=\"14\" rx=\"2\" ry=\"2\" width=\"14\" x=\"8\" y=\"8\"></rect><path d=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"></path></svg></button></div></div></pre><p class=\"rt-Text font-normal text-slate-12 mb-4 leading-7\">Here is an example of the app running:</p><div class=\"rt-Flex rt-r-fd-column rt-r-ai-start rt-r-gap-3 rx-Stack css-11aggx6\"><div class=\"react-flow\" data-testid=\"rf__wrapper\" style=\"width:100%;height:100%;overflow:hidden;position:relative;z-index:0\"><div class=\"react-flow__renderer\" style=\"position:absolute;width:100%;height:100%;top:0;left:0\"><div class=\"react-flow__pane\" style=\"position:absolute;width:100%;height:100%;top:0;left:0\"><div class=\"react-flow__viewport react-flow__container\" style=\"transform: translate(-0.427959px, -17.5746px) scale(1.49571);\"><svg class=\"react-flow__edges react-flow__container\" height=\"436\" style=\"z-index: 0;\" width=\"747\"><defs></defs><g><g aria-describedby=\"react-flow__edge-desc-1\" aria-label=\"Edge from 1 to 2\" class=\"react-flow__edge react-flow__edge-default nopan animated\" data-testid=\"rf__edge-e1-2\" role=\"button\" tabindex=\"0\"><path class=\"react-flow__edge-path\" d=\"M267.2084009827109,43.58269823084142 C267.2084009827109,84.47522460682598 117.21954124217687,84.47522460682598 117.21954124217687,125.36775098281053\" fill=\"none\" marker-end=\"url('#')\" marker-start=\"url('#')\"></path><path class=\"react-flow__edge-interaction\" d=\"M267.2084009827109,43.58269823084142 C267.2084009827109,84.47522460682598 117.21954124217687,84.47522460682598 117.21954124217687,125.36775098281053\" fill=\"none\" stroke-opacity=\"0\" stroke-width=\"20\"></path><g class=\"react-flow__edge-textwrapper\" transform=\"translate(190.17230436630433 78.47522460682598)\" visibility=\"visible\"><rect class=\"react-flow__edge-textbg\" height=\"20\" rx=\"2\" ry=\"2\" width=\"8.083333492279053\" x=\"-2\" y=\"-4\"></rect><text class=\"react-flow__edge-text\" dy=\"0.3em\" y=\"6\">*</text></g></g><g aria-describedby=\"react-flow__edge-desc-1\" aria-label=\"Edge from 2 to 3\" class=\"react-flow__edge react-flow__edge-default nopan animated\" data-testid=\"rf__edge-e2-3\" role=\"button\" tabindex=\"0\"><path class=\"react-flow__edge-path\" d=\"M117.21954124217687,143.58269823084143 C117.21954124217687,196.97522460682598 267.2084009827109,196.97522460682598 267.2084009827109,250.36775098281052\" fill=\"none\" marker-end=\"url('#')\" marker-start=\"url('#')\"></path><path class=\"react-flow__edge-interaction\" d=\"M117.21954124217687,143.58269823084143 C117.21954124217687,196.97522460682598 267.2084009827109,196.97522460682598 267.2084009827109,250.36775098281052\" fill=\"none\" stroke-opacity=\"0\" stroke-width=\"20\"></path><g class=\"react-flow__edge-textwrapper\" transform=\"translate(189.5556378108997 190.97522460682595)\" visibility=\"visible\"><rect class=\"react-flow__edge-textbg\" height=\"20\" rx=\"2\" ry=\"2\" width=\"9.316666603088379\" x=\"-2\" y=\"-4\"></rect><text class=\"react-flow__edge-text\" dy=\"0.3em\" y=\"6\">+</text></g></g></g></svg><div class=\"react-flow__edgelabel-renderer\"></div><div class=\"react-flow__nodes\" style=\"position:absolute;width:100%;height:100%;top:0;left:0\"><div aria-describedby=\"react-flow__node-desc-1\" class=\"react-flow__node react-flow__node-input nopan selectable\" data-id=\"1\" data-testid=\"rf__node-1\" role=\"button\" style=\"z-index: 0; transform: translate(250px, 25px); pointer-events: all; visibility: visible;\" tabindex=\"0\">150<div class=\"react-flow__handle react-flow__handle-bottom nodrag nopan source connectable connectablestart connectableend connectionindicator\" data-handlepos=\"bottom\" data-id=\"1-null-source\" data-nodeid=\"1\"></div></div><div aria-describedby=\"react-flow__node-desc-1\" class=\"react-flow__node react-flow__node-default nopan selectable\" data-id=\"2\" data-testid=\"rf__node-2\" role=\"button\" style=\"z-index: 0; transform: translate(100px, 125px); pointer-events: all; visibility: visible;\" tabindex=\"0\"><div class=\"react-flow__handle react-flow__handle-top nodrag nopan target connectable connectablestart connectableend connectionindicator\" data-handlepos=\"top\" data-id=\"2-null-target\" data-nodeid=\"2\"></div>25<div class=\"react-flow__handle react-flow__handle-bottom nodrag nopan source connectable connectablestart connectableend connectionindicator\" data-handlepos=\"bottom\" data-id=\"2-null-source\" data-nodeid=\"2\"></div></div><div aria-describedby=\"react-flow__node-desc-1\" class=\"react-flow__node react-flow__node-output nopan selectable\" data-id=\"3\" data-testid=\"rf__node-3\" role=\"button\" style=\"z-index: 0; transform: translate(250px, 250px); pointer-events: all; visibility: visible;\" tabindex=\"0\"><div class=\"react-flow__handle react-flow__handle-top nodrag nopan target connectable connectablestart connectableend connectionindicator\" data-handlepos=\"top\" data-id=\"3-null-target\" data-nodeid=\"3\"></div>5</div></div></div></div></div><svg class=\"react-flow__background\" data-testid=\"rf__background\" style=\"position:absolute;width:100%;height:100%;top:0;left:0\"><pattern height=\"29.91423670668954\" id=\"pattern-1undefined\" patterntransform=\"translate(-0.7478559176672385,-0.7478559176672385)\" patternunits=\"userSpaceOnUse\" width=\"29.91423670668954\" x=\"-0.42795883361924325\" y=\"-17.57461406518013\"><circle cx=\"0.7478559176672385\" cy=\"0.7478559176672385\" fill=\"#91919a\" r=\"0.7478559176672385\"></circle></pattern><rect fill=\"url(#pattern-1undefined)\" height=\"100%\" width=\"100%\" x=\"0\" y=\"0\"></rect></svg><div class=\"react-flow__panel react-flow__controls bottom left\" data-testid=\"rf__controls\" style=\"pointer-events: all;\"><button aria-label=\"zoom in\" class=\"react-flow__controls-button react-flow__controls-zoomin\" title=\"zoom in\" type=\"button\"><svg viewbox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M32 18.133H18.133V32h-4.266V18.133H0v-4.266h13.867V0h4.266v13.867H32z\"></path></svg></button><button aria-label=\"zoom out\" class=\"react-flow__controls-button react-flow__controls-zoomout\" title=\"zoom out\" type=\"button\"><svg viewbox=\"0 0 32 5\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M0 0h32v4.2H0z\"></path></svg></button><button aria-label=\"fit view\" class=\"react-flow__controls-button react-flow__controls-fitview\" title=\"fit view\" type=\"button\"><svg viewbox=\"0 0 32 30\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M3.692 4.63c0-.53.4-.938.939-.938h5.215V0H4.708C2.13 0 0 2.054 0 4.63v5.216h3.692V4.631zM27.354 0h-5.2v3.692h5.17c.53 0 .984.4.984.939v5.215H32V4.631A4.624 4.624 0 0027.354 0zm.954 24.83c0 .532-.4.94-.939.94h-5.215v3.768h5.215c2.577 0 4.631-2.13 4.631-4.707v-5.139h-3.692v5.139zm-23.677.94c-.531 0-.939-.4-.939-.94v-5.138H0v5.139c0 2.577 2.13 4.707 4.708 4.707h5.138V25.77H4.631z\"></path></svg></button><button aria-label=\"toggle interactivity\" class=\"react-flow__controls-button react-flow__controls-interactive\" title=\"toggle interactivity\" type=\"button\"><svg viewbox=\"0 0 25 32\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"M21.333 10.667H19.81V7.619C19.81 3.429 16.38 0 12.19 0c-4.114 1.828-1.37 2.133.305 2.438 1.676.305 4.42 2.59 4.42 5.181v3.048H3.047A3.056 3.056 0 000 13.714v15.238A3.056 3.056 0 003.048 32h18.285a3.056 3.056 0 003.048-3.048V13.714a3.056 3.056 0 00-3.048-3.047zM12.19 24.533a3.056 3.056 0 01-3.047-3.047 3.056 3.056 0 013.047-3.048 3.056 3.056 0 013.048 3.048 3.056 3.056 0 01-3.048 3.047z\"></path></svg></button></div><div class=\"react-flow__panel react-flow__attribution bottom right\" data-message=\"Please only hide this attribution when you are subscribed to React Flow Pro: https://reactflow.dev/pro\" style=\"pointer-events:all\"><a aria-label=\"React Flow attribution\" href=\"https://reactflow.dev\" rel=\"noopener noreferrer\" target=\"_blank\">React Flow</a></div><div id=\"react-flow__node-desc-1\" style=\"display:none\">Press enter or space to select a node.<!-- -->You can then use the arrow keys to move the node around.<!-- --> Press delete to remove it and escape to cancel.<!-- --> </div><div id=\"react-flow__edge-desc-1\" style=\"display:none\">Press enter or space to select an edge. You can then press delete to remove it or escape to cancel.</div><div aria-atomic=\"true\" aria-live=\"assertive\" id=\"react-flow__aria-live-1\" style=\"position:absolute;width:1px;height:1px;margin:-1px;border:0;padding:0;overflow:hidden;clip:rect(0px, 0px, 0px, 0px);clip-path:inset(100%)\"></div></div><div class=\"rt-Flex rt-r-fd-row rt-r-ai-start rt-r-gap-3 rx-Stack css-1tehhj4\"><button class=\"rt-reset rt-BaseButton rt-r-size-2 rt-variant-solid rt-Button css-11ze7cv\" data-accent-color=\"\">Clear graph</button><button class=\"rt-reset rt-BaseButton rt-r-size-2 rt-variant-solid rt-Button css-11ze7cv\" data-accent-color=\"\">Add node</button></div></div></article>"
  ]
}